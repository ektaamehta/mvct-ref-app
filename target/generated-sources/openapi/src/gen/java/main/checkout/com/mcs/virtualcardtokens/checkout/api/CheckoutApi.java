/*
 * Mastercard Virtual Card Token Checkout API
 * Checkout end point used by Mastercard Virtual Card Token Integrators to receive payload data from the Mastercard Checkout Solutions and send the results of transaction authorization back to the Mastercard. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.checkout.api;

import com.mcs.virtualcardtokens.checkout.invoker.ApiCallback;
import com.mcs.virtualcardtokens.checkout.invoker.ApiClient;
import com.mcs.virtualcardtokens.checkout.invoker.ApiException;
import com.mcs.virtualcardtokens.checkout.invoker.ApiResponse;
import com.mcs.virtualcardtokens.checkout.invoker.Configuration;
import com.mcs.virtualcardtokens.checkout.invoker.Pair;
import com.mcs.virtualcardtokens.checkout.invoker.ProgressRequestBody;
import com.mcs.virtualcardtokens.checkout.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mcs.virtualcardtokens.checkout.model.CheckoutRequest;
import com.mcs.virtualcardtokens.checkout.model.CheckoutResponse;
import com.mcs.virtualcardtokens.checkout.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CheckoutApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CheckoutApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CheckoutApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postTransactionCredentials
     * @param checkoutRequest Checkout Request (required)
     * @param xSrcCxFlowId The X-Src-Cx-Flow-Id ensures to direct all calls from the same client to the same server and maintains session affinity. When you make your initial API call, Secure Card on File responds with the X-Src-Cx-Flow-Id in the header. The X-Src-Cx-Flow-Id returned in this response can be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. (optional)
     * @param xSrcResponseHost The X-Src-Response-Host is used to direct all calls from the same client to the same server to maintain session affinity. When you make your initial API call, Mastercard Checkout Solutions responds with the X-Src-Response-Host in the HTTP header. The X-Src-Response-Host that is returned will contain a site specific URL that must be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  * X-Src-Cx-Flow-Id - The X-Src-Cx-Flow-Id ensures to direct all calls from the same client to the same server and maintains session affinity. When you make your initial API call, Secure Card on File responds with the X-Src-Cx-Flow-Id in the header. The X-Src-Cx-Flow-Id returned in this response can be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. <br>  * X-Src-Response-Host - The X-Src-Response-Host is used to direct all calls from the same client to the same server to maintain session affinity. When you make your initial API call, Mastercard Checkout Solutions responds with the X-Src-Response-Host in the HTTP header. The X-Src-Response-Host that is returned will contain a site specific URL that must be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Reason code of &#x60;INVALID_ARGUMENT&#x60; Identifies a malformed or invalid request. Use cases:    * Mandatory parameters in request are missing. Example, &#x60;srcClientId&#x60; or &#x60;srcDigitalCardId&#x60; values are not provided.   * Request parameters value has invalid format. Example, &#x60;srcClientId&#x60;, &#x60;srcDigitalCardId&#x60;,&#x60;srcCorrelationId&#x60;, &#x60;recipientIdCheckout&#x60;,  &#x60;shippingAddressId&#x60; is not in UUID format.   * Request have &#x60;transactionAmount&#x60; object present but its property &#x60;transactionAmount&#x60; or &#x60;transactionCurrencyCode&#x60; is not present.   * &#x60;srcDigitalCardId&#x60; associated card is in a &#x60;LOCKED&#x60; or &#x60;PENDING_VERIFICATION&#x60; state, or the card itself is not present in the system.   * System was not able to find the consumer associated with a card or the address associated with the addressId provided in request.   * Length of a property exceeds the maximum allowed length. Example, &#x60;srciTransactionId&#x60; parameter length is too long. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, see error object for details, e.g. authorization token validation failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. API will return this response if identifier validation fails. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTransactionCredentialsCall(CheckoutRequest checkoutRequest, String xSrcCxFlowId, String xSrcResponseHost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkoutRequest;

        // create path and map variables
        String localVarPath = "/transaction/credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSrcCxFlowId != null) {
            localVarHeaderParams.put("X-Src-Cx-Flow-Id", localVarApiClient.parameterToString(xSrcCxFlowId));
        }

        if (xSrcResponseHost != null) {
            localVarHeaderParams.put("X-Src-Response-Host", localVarApiClient.parameterToString(xSrcResponseHost));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTransactionCredentialsValidateBeforeCall(CheckoutRequest checkoutRequest, String xSrcCxFlowId, String xSrcResponseHost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkoutRequest' is set
        if (checkoutRequest == null) {
            throw new ApiException("Missing the required parameter 'checkoutRequest' when calling postTransactionCredentials(Async)");
        }

        return postTransactionCredentialsCall(checkoutRequest, xSrcCxFlowId, xSrcResponseHost, _callback);

    }

    /**
     * Checkout end point for retrieving transaction payload.
     * Requests the preparation of transaction credentials for checkout. The transaction credentials payload data is encrypted according to JSON Web Encryption (JWE) specification RFC 7516. Algorithm used to encrypt the payload is according to RFC 7518 section 4.1. Obtain the encrypted transaction credentials for an enrolled card from Secure Card on File so that it can be submitted for authorization processing and the consumer can complete the purchase.
     * @param checkoutRequest Checkout Request (required)
     * @param xSrcCxFlowId The X-Src-Cx-Flow-Id ensures to direct all calls from the same client to the same server and maintains session affinity. When you make your initial API call, Secure Card on File responds with the X-Src-Cx-Flow-Id in the header. The X-Src-Cx-Flow-Id returned in this response can be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. (optional)
     * @param xSrcResponseHost The X-Src-Response-Host is used to direct all calls from the same client to the same server to maintain session affinity. When you make your initial API call, Mastercard Checkout Solutions responds with the X-Src-Response-Host in the HTTP header. The X-Src-Response-Host that is returned will contain a site specific URL that must be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. (optional)
     * @return CheckoutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  * X-Src-Cx-Flow-Id - The X-Src-Cx-Flow-Id ensures to direct all calls from the same client to the same server and maintains session affinity. When you make your initial API call, Secure Card on File responds with the X-Src-Cx-Flow-Id in the header. The X-Src-Cx-Flow-Id returned in this response can be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. <br>  * X-Src-Response-Host - The X-Src-Response-Host is used to direct all calls from the same client to the same server to maintain session affinity. When you make your initial API call, Mastercard Checkout Solutions responds with the X-Src-Response-Host in the HTTP header. The X-Src-Response-Host that is returned will contain a site specific URL that must be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Reason code of &#x60;INVALID_ARGUMENT&#x60; Identifies a malformed or invalid request. Use cases:    * Mandatory parameters in request are missing. Example, &#x60;srcClientId&#x60; or &#x60;srcDigitalCardId&#x60; values are not provided.   * Request parameters value has invalid format. Example, &#x60;srcClientId&#x60;, &#x60;srcDigitalCardId&#x60;,&#x60;srcCorrelationId&#x60;, &#x60;recipientIdCheckout&#x60;,  &#x60;shippingAddressId&#x60; is not in UUID format.   * Request have &#x60;transactionAmount&#x60; object present but its property &#x60;transactionAmount&#x60; or &#x60;transactionCurrencyCode&#x60; is not present.   * &#x60;srcDigitalCardId&#x60; associated card is in a &#x60;LOCKED&#x60; or &#x60;PENDING_VERIFICATION&#x60; state, or the card itself is not present in the system.   * System was not able to find the consumer associated with a card or the address associated with the addressId provided in request.   * Length of a property exceeds the maximum allowed length. Example, &#x60;srciTransactionId&#x60; parameter length is too long. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, see error object for details, e.g. authorization token validation failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. API will return this response if identifier validation fails. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public CheckoutResponse postTransactionCredentials(CheckoutRequest checkoutRequest, String xSrcCxFlowId, String xSrcResponseHost) throws ApiException {
        ApiResponse<CheckoutResponse> localVarResp = postTransactionCredentialsWithHttpInfo(checkoutRequest, xSrcCxFlowId, xSrcResponseHost);
        return localVarResp.getData();
    }

    /**
     * Checkout end point for retrieving transaction payload.
     * Requests the preparation of transaction credentials for checkout. The transaction credentials payload data is encrypted according to JSON Web Encryption (JWE) specification RFC 7516. Algorithm used to encrypt the payload is according to RFC 7518 section 4.1. Obtain the encrypted transaction credentials for an enrolled card from Secure Card on File so that it can be submitted for authorization processing and the consumer can complete the purchase.
     * @param checkoutRequest Checkout Request (required)
     * @param xSrcCxFlowId The X-Src-Cx-Flow-Id ensures to direct all calls from the same client to the same server and maintains session affinity. When you make your initial API call, Secure Card on File responds with the X-Src-Cx-Flow-Id in the header. The X-Src-Cx-Flow-Id returned in this response can be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. (optional)
     * @param xSrcResponseHost The X-Src-Response-Host is used to direct all calls from the same client to the same server to maintain session affinity. When you make your initial API call, Mastercard Checkout Solutions responds with the X-Src-Response-Host in the HTTP header. The X-Src-Response-Host that is returned will contain a site specific URL that must be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. (optional)
     * @return ApiResponse&lt;CheckoutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  * X-Src-Cx-Flow-Id - The X-Src-Cx-Flow-Id ensures to direct all calls from the same client to the same server and maintains session affinity. When you make your initial API call, Secure Card on File responds with the X-Src-Cx-Flow-Id in the header. The X-Src-Cx-Flow-Id returned in this response can be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. <br>  * X-Src-Response-Host - The X-Src-Response-Host is used to direct all calls from the same client to the same server to maintain session affinity. When you make your initial API call, Mastercard Checkout Solutions responds with the X-Src-Response-Host in the HTTP header. The X-Src-Response-Host that is returned will contain a site specific URL that must be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Reason code of &#x60;INVALID_ARGUMENT&#x60; Identifies a malformed or invalid request. Use cases:    * Mandatory parameters in request are missing. Example, &#x60;srcClientId&#x60; or &#x60;srcDigitalCardId&#x60; values are not provided.   * Request parameters value has invalid format. Example, &#x60;srcClientId&#x60;, &#x60;srcDigitalCardId&#x60;,&#x60;srcCorrelationId&#x60;, &#x60;recipientIdCheckout&#x60;,  &#x60;shippingAddressId&#x60; is not in UUID format.   * Request have &#x60;transactionAmount&#x60; object present but its property &#x60;transactionAmount&#x60; or &#x60;transactionCurrencyCode&#x60; is not present.   * &#x60;srcDigitalCardId&#x60; associated card is in a &#x60;LOCKED&#x60; or &#x60;PENDING_VERIFICATION&#x60; state, or the card itself is not present in the system.   * System was not able to find the consumer associated with a card or the address associated with the addressId provided in request.   * Length of a property exceeds the maximum allowed length. Example, &#x60;srciTransactionId&#x60; parameter length is too long. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, see error object for details, e.g. authorization token validation failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. API will return this response if identifier validation fails. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckoutResponse> postTransactionCredentialsWithHttpInfo(CheckoutRequest checkoutRequest, String xSrcCxFlowId, String xSrcResponseHost) throws ApiException {
        okhttp3.Call localVarCall = postTransactionCredentialsValidateBeforeCall(checkoutRequest, xSrcCxFlowId, xSrcResponseHost, null);
        Type localVarReturnType = new TypeToken<CheckoutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checkout end point for retrieving transaction payload. (asynchronously)
     * Requests the preparation of transaction credentials for checkout. The transaction credentials payload data is encrypted according to JSON Web Encryption (JWE) specification RFC 7516. Algorithm used to encrypt the payload is according to RFC 7518 section 4.1. Obtain the encrypted transaction credentials for an enrolled card from Secure Card on File so that it can be submitted for authorization processing and the consumer can complete the purchase.
     * @param checkoutRequest Checkout Request (required)
     * @param xSrcCxFlowId The X-Src-Cx-Flow-Id ensures to direct all calls from the same client to the same server and maintains session affinity. When you make your initial API call, Secure Card on File responds with the X-Src-Cx-Flow-Id in the header. The X-Src-Cx-Flow-Id returned in this response can be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. (optional)
     * @param xSrcResponseHost The X-Src-Response-Host is used to direct all calls from the same client to the same server to maintain session affinity. When you make your initial API call, Mastercard Checkout Solutions responds with the X-Src-Response-Host in the HTTP header. The X-Src-Response-Host that is returned will contain a site specific URL that must be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  * X-Src-Cx-Flow-Id - The X-Src-Cx-Flow-Id ensures to direct all calls from the same client to the same server and maintains session affinity. When you make your initial API call, Secure Card on File responds with the X-Src-Cx-Flow-Id in the header. The X-Src-Cx-Flow-Id returned in this response can be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. <br>  * X-Src-Response-Host - The X-Src-Response-Host is used to direct all calls from the same client to the same server to maintain session affinity. When you make your initial API call, Mastercard Checkout Solutions responds with the X-Src-Response-Host in the HTTP header. The X-Src-Response-Host that is returned will contain a site specific URL that must be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Reason code of &#x60;INVALID_ARGUMENT&#x60; Identifies a malformed or invalid request. Use cases:    * Mandatory parameters in request are missing. Example, &#x60;srcClientId&#x60; or &#x60;srcDigitalCardId&#x60; values are not provided.   * Request parameters value has invalid format. Example, &#x60;srcClientId&#x60;, &#x60;srcDigitalCardId&#x60;,&#x60;srcCorrelationId&#x60;, &#x60;recipientIdCheckout&#x60;,  &#x60;shippingAddressId&#x60; is not in UUID format.   * Request have &#x60;transactionAmount&#x60; object present but its property &#x60;transactionAmount&#x60; or &#x60;transactionCurrencyCode&#x60; is not present.   * &#x60;srcDigitalCardId&#x60; associated card is in a &#x60;LOCKED&#x60; or &#x60;PENDING_VERIFICATION&#x60; state, or the card itself is not present in the system.   * System was not able to find the consumer associated with a card or the address associated with the addressId provided in request.   * Length of a property exceeds the maximum allowed length. Example, &#x60;srciTransactionId&#x60; parameter length is too long. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, see error object for details, e.g. authorization token validation failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. API will return this response if identifier validation fails. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTransactionCredentialsAsync(CheckoutRequest checkoutRequest, String xSrcCxFlowId, String xSrcResponseHost, final ApiCallback<CheckoutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTransactionCredentialsValidateBeforeCall(checkoutRequest, xSrcCxFlowId, xSrcResponseHost, _callback);
        Type localVarReturnType = new TypeToken<CheckoutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
