/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.card.invoker.JSON;

/**
 * DelegatedAuthenticationModel
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:04.218510319Z[Etc/UTC]")
public class DelegatedAuthenticationModel {
  /**
   * Supported Token Authentication Framework (TAF) implementation. TAF enables Cardholder authentication on tokenized transactions for Mastercard Checkout Solutions (MCS). Mastercard currently offers version AE_TYPE_3 and AE_TYPE_4.  * &#x60;AE_TYPE_3&#x60; indicates that the card is eligible for authentication in the Acquirer domain without Merchant liability protection.  * &#x60;AE_TYPE_4&#x60; indicates that the card is eligible for authentication in the Acquirer domain with Merchant liability protection. 
   */
  @JsonAdapter(ModelTypeEnum.Adapter.class)
  public enum ModelTypeEnum {
    _3("AE_TYPE_3"),
    
    _4("AE_TYPE_4");

    private String value;

    ModelTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModelTypeEnum fromValue(String value) {
      for (ModelTypeEnum b : ModelTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModelTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModelTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModelTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModelTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODEL_TYPE = "modelType";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPE)
  private ModelTypeEnum modelType;

  public static final String SERIALIZED_NAME_IS_SUPPORTED = "isSupported";
  @SerializedName(SERIALIZED_NAME_IS_SUPPORTED)
  private Boolean isSupported;

  public DelegatedAuthenticationModel() {
  }

  public DelegatedAuthenticationModel modelType(ModelTypeEnum modelType) {
    this.modelType = modelType;
    return this;
  }

   /**
   * Supported Token Authentication Framework (TAF) implementation. TAF enables Cardholder authentication on tokenized transactions for Mastercard Checkout Solutions (MCS). Mastercard currently offers version AE_TYPE_3 and AE_TYPE_4.  * &#x60;AE_TYPE_3&#x60; indicates that the card is eligible for authentication in the Acquirer domain without Merchant liability protection.  * &#x60;AE_TYPE_4&#x60; indicates that the card is eligible for authentication in the Acquirer domain with Merchant liability protection. 
   * @return modelType
  **/
  @jakarta.annotation.Nonnull
  public ModelTypeEnum getModelType() {
    return modelType;
  }

  public void setModelType(ModelTypeEnum modelType) {
    this.modelType = modelType;
  }


  public DelegatedAuthenticationModel isSupported(Boolean isSupported) {
    this.isSupported = isSupported;
    return this;
  }

   /**
   * Flag indicating whether Token Authentication Framework (TAF) is supported for the FPAN. TAF enables Cardholder authentication on tokenized transactions for Mastercard Checkout Solutions (MCS).
   * @return isSupported
  **/
  @jakarta.annotation.Nonnull
  public Boolean getIsSupported() {
    return isSupported;
  }

  public void setIsSupported(Boolean isSupported) {
    this.isSupported = isSupported;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DelegatedAuthenticationModel instance itself
   */
  public DelegatedAuthenticationModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DelegatedAuthenticationModel delegatedAuthenticationModel = (DelegatedAuthenticationModel) o;
    return Objects.equals(this.modelType, delegatedAuthenticationModel.modelType) &&
        Objects.equals(this.isSupported, delegatedAuthenticationModel.isSupported)&&
        Objects.equals(this.additionalProperties, delegatedAuthenticationModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelType, isSupported, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DelegatedAuthenticationModel {\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("    isSupported: ").append(toIndentedString(isSupported)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("modelType");
    openapiFields.add("isSupported");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("modelType");
    openapiRequiredFields.add("isSupported");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DelegatedAuthenticationModel
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DelegatedAuthenticationModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DelegatedAuthenticationModel is not found in the empty JSON string", DelegatedAuthenticationModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DelegatedAuthenticationModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("modelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelType").toString()));
      }
      // validate the required field `modelType`
      ModelTypeEnum.validateJsonElement(jsonObj.get("modelType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DelegatedAuthenticationModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DelegatedAuthenticationModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DelegatedAuthenticationModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DelegatedAuthenticationModel.class));

       return (TypeAdapter<T>) new TypeAdapter<DelegatedAuthenticationModel>() {
           @Override
           public void write(JsonWriter out, DelegatedAuthenticationModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DelegatedAuthenticationModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             DelegatedAuthenticationModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DelegatedAuthenticationModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DelegatedAuthenticationModel
  * @throws IOException if the JSON string is invalid with respect to DelegatedAuthenticationModel
  */
  public static DelegatedAuthenticationModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DelegatedAuthenticationModel.class);
  }

 /**
  * Convert an instance of DelegatedAuthenticationModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

