/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.api;

import com.mcs.virtualcardtokens.card.invoker.ApiException;
import com.mcs.virtualcardtokens.card.model.DeleteCardResponse;
import com.mcs.virtualcardtokens.card.model.EnrollCardRequest;
import com.mcs.virtualcardtokens.card.model.EnrollCardResponse;
import com.mcs.virtualcardtokens.card.model.Error;
import com.mcs.virtualcardtokens.card.model.GetCardResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CardsApi
 */
@Disabled
public class CardsApiTest {

    private final CardsApi api = new CardsApi();

    /**
     * Delete card by card ID.
     *
     * Delete card by card ID The Delete Card by ID operation will delete the card with the specified card identifier. Delete a previously enrolled card with mastercard.&lt;br&gt;The parameters passed in the HTTP request header must be in an encoded format to be valid for HTTP transmission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCardTest() throws ApiException {
        String cardId = null;
        UUID srcClientId = null;
        String serviceId = null;
        String srcDpaId = null;
        String srcCorrelationId = null;
        String srciTransactionId = null;
        String reason = null;
        String requestor = null;
        DeleteCardResponse response = api.deleteCard(cardId, srcClientId, serviceId, srcDpaId, srcCorrelationId, srciTransactionId, reason, requestor);
        // TODO: test validations
    }

    /**
     * Get card by card ID
     *
     * The GetCardRequest is used to retrieve the latest card information. It must contain the following values: &lt;ul&gt; &lt;li&gt;serviceId &lt;/li&gt; &lt;li&gt;srcClientId &lt;/li&gt; &lt;li&gt;srcDigitalCardId &lt;/li&gt; &lt;/ul&gt; The following values are conditional: &lt;ul&gt; &lt;li&gt;srcDpaId &lt;/li&gt; &lt;/ul&gt; &lt;br&gt;The parameters passed in the HTTP request header must be in an encoded format to be valid for HTTP transmission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCardTest() throws ApiException {
        String cardId = null;
        UUID srcClientId = null;
        String serviceId = null;
        String srcDpaId = null;
        String srcCorrelationId = null;
        String srciTransactionId = null;
        Boolean tokenRequested = null;
        String keyFingerprintId = null;
        String xSrcCxFlowId = null;
        GetCardResponse response = api.getCard(cardId, srcClientId, serviceId, srcDpaId, srcCorrelationId, srciTransactionId, tokenRequested, keyFingerprintId, xSrcCxFlowId);
        // TODO: test validations
    }

    /**
     * Enroll a Card.
     *
     * The Card Enrollment API enrolls a Mastercard card into Mastercard Checkout Solutions by tokenizing the card so that the consumer can use the token for subsequent checkouts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putCardTest() throws ApiException {
        EnrollCardRequest enrollCardRequest = null;
        EnrollCardResponse response = api.putCard(enrollCardRequest);
        // TODO: test validations
    }

}
