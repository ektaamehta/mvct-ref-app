/*
 * Mastercard Virtual Card Token Checkout API
 * Checkout end point used by Mastercard Virtual Card Token Integrators to receive payload data from the Mastercard Checkout Solutions and send the results of transaction authorization back to the Mastercard. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.checkout.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.checkout.model.DynamicDataType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.checkout.invoker.JSON;

/**
 * Object for cryptogram corresponding to the payment token.  Cryptograms are dynamic data that is submitted along with the payment token for payment authorization to decrypt the token and retrieve the underlying Account PAN. 
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:06.789601445Z[Etc/UTC]")
public class DynamicData {
  public static final String SERIALIZED_NAME_DYNAMIC_DATA_VALUE = "dynamicDataValue";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_DATA_VALUE)
  private String dynamicDataValue;

  public static final String SERIALIZED_NAME_DYNAMIC_DATA_TYPE = "dynamicDataType";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_DATA_TYPE)
  private DynamicDataType dynamicDataType;

  public static final String SERIALIZED_NAME_DYNAMIC_DATA_EXPIRATION = "dynamicDataExpiration";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_DATA_EXPIRATION)
  private String dynamicDataExpiration;

  public DynamicData() {
  }

  public DynamicData dynamicDataValue(String dynamicDataValue) {
    this.dynamicDataValue = dynamicDataValue;
    return this;
  }

   /**
   * Value of the cryptogram corresponding to dynamicDataType.
   * @return dynamicDataValue
  **/
  @jakarta.annotation.Nullable
  public String getDynamicDataValue() {
    return dynamicDataValue;
  }

  public void setDynamicDataValue(String dynamicDataValue) {
    this.dynamicDataValue = dynamicDataValue;
  }


  public DynamicData dynamicDataType(DynamicDataType dynamicDataType) {
    this.dynamicDataType = dynamicDataType;
    return this;
  }

   /**
   * Get dynamicDataType
   * @return dynamicDataType
  **/
  @jakarta.annotation.Nonnull
  public DynamicDataType getDynamicDataType() {
    return dynamicDataType;
  }

  public void setDynamicDataType(DynamicDataType dynamicDataType) {
    this.dynamicDataType = dynamicDataType;
  }


  public DynamicData dynamicDataExpiration(String dynamicDataExpiration) {
    this.dynamicDataExpiration = dynamicDataExpiration;
    return this;
  }

   /**
   * Expiry period of the dynamic data in UTC Format.
   * @return dynamicDataExpiration
  **/
  @jakarta.annotation.Nullable
  public String getDynamicDataExpiration() {
    return dynamicDataExpiration;
  }

  public void setDynamicDataExpiration(String dynamicDataExpiration) {
    this.dynamicDataExpiration = dynamicDataExpiration;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DynamicData instance itself
   */
  public DynamicData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicData dynamicData = (DynamicData) o;
    return Objects.equals(this.dynamicDataValue, dynamicData.dynamicDataValue) &&
        Objects.equals(this.dynamicDataType, dynamicData.dynamicDataType) &&
        Objects.equals(this.dynamicDataExpiration, dynamicData.dynamicDataExpiration)&&
        Objects.equals(this.additionalProperties, dynamicData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dynamicDataValue, dynamicDataType, dynamicDataExpiration, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicData {\n");
    sb.append("    dynamicDataValue: ").append(toIndentedString(dynamicDataValue)).append("\n");
    sb.append("    dynamicDataType: ").append(toIndentedString(dynamicDataType)).append("\n");
    sb.append("    dynamicDataExpiration: ").append(toIndentedString(dynamicDataExpiration)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dynamicDataValue");
    openapiFields.add("dynamicDataType");
    openapiFields.add("dynamicDataExpiration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dynamicDataType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DynamicData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DynamicData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DynamicData is not found in the empty JSON string", DynamicData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DynamicData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dynamicDataValue") != null && !jsonObj.get("dynamicDataValue").isJsonNull()) && !jsonObj.get("dynamicDataValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dynamicDataValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dynamicDataValue").toString()));
      }
      // validate the required field `dynamicDataType`
      DynamicDataType.validateJsonElement(jsonObj.get("dynamicDataType"));
      if ((jsonObj.get("dynamicDataExpiration") != null && !jsonObj.get("dynamicDataExpiration").isJsonNull()) && !jsonObj.get("dynamicDataExpiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dynamicDataExpiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dynamicDataExpiration").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DynamicData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DynamicData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DynamicData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DynamicData.class));

       return (TypeAdapter<T>) new TypeAdapter<DynamicData>() {
           @Override
           public void write(JsonWriter out, DynamicData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DynamicData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             DynamicData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DynamicData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DynamicData
  * @throws IOException if the JSON string is invalid with respect to DynamicData
  */
  public static DynamicData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DynamicData.class);
  }

 /**
  * Convert an instance of DynamicData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

