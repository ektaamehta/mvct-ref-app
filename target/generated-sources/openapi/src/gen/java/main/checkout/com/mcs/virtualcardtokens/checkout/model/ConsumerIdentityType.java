/*
 * Mastercard Virtual Card Token Checkout API
 * Checkout end point used by Mastercard Virtual Card Token Integrators to receive payload data from the Mastercard Checkout Solutions and send the results of transaction authorization back to the Mastercard. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.checkout.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Identifies the type of consumer identity transmitted or collected.
 */
@JsonAdapter(ConsumerIdentityType.Adapter.class)
public enum ConsumerIdentityType {
  
  EMAIL_ADDRESS("EMAIL_ADDRESS"),
  
  MOBILE_PHONE_NUMBER("MOBILE_PHONE_NUMBER"),
  
  EXTERNAL_ACCOUNT_ID("EXTERNAL_ACCOUNT_ID");

  private String value;

  ConsumerIdentityType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ConsumerIdentityType fromValue(String value) {
    for (ConsumerIdentityType b : ConsumerIdentityType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ConsumerIdentityType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ConsumerIdentityType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ConsumerIdentityType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ConsumerIdentityType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ConsumerIdentityType.fromValue(value);
  }
}

