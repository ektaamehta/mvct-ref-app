/*
 * Mastercard Virtual Card Token Checkout API
 * Checkout end point used by Mastercard Virtual Card Token Integrators to receive payload data from the Mastercard Checkout Solutions and send the results of transaction authorization back to the Mastercard. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.checkout.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.checkout.invoker.JSON;

/**
 * Consumer supplied data, either manually entered (or supplied by other means, e.g. voice, camera etc.) or previously stored.  __Conditional__: At least one of consumerData or sellerData is required. Please note that consumerData values override the sellerData. 
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:06.789601445Z[Etc/UTC]")
public class ConsumerData {
  public static final String SERIALIZED_NAME_BILL_NUMBER = "billNumber";
  @SerializedName(SERIALIZED_NAME_BILL_NUMBER)
  private String billNumber;

  public static final String SERIALIZED_NAME_MOBILE_NUMBER = "mobileNumber";
  @SerializedName(SERIALIZED_NAME_MOBILE_NUMBER)
  private String mobileNumber;

  public static final String SERIALIZED_NAME_STORE_LABEL = "storeLabel";
  @SerializedName(SERIALIZED_NAME_STORE_LABEL)
  private String storeLabel;

  public static final String SERIALIZED_NAME_LOYALTY_NUMBER = "loyaltyNumber";
  @SerializedName(SERIALIZED_NAME_LOYALTY_NUMBER)
  private String loyaltyNumber;

  public static final String SERIALIZED_NAME_REFERENCE_LABEL = "referenceLabel";
  @SerializedName(SERIALIZED_NAME_REFERENCE_LABEL)
  private String referenceLabel;

  public static final String SERIALIZED_NAME_CUSTOMER_LABEL = "customerLabel";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_LABEL)
  private String customerLabel;

  public static final String SERIALIZED_NAME_TERMINAL_LABEL = "terminalLabel";
  @SerializedName(SERIALIZED_NAME_TERMINAL_LABEL)
  private String terminalLabel;

  public static final String SERIALIZED_NAME_PURPOSE_OFTRANSACTION = "purposeOftransaction";
  @SerializedName(SERIALIZED_NAME_PURPOSE_OFTRANSACTION)
  private String purposeOftransaction;

  public static final String SERIALIZED_NAME_EMAIL_ID = "emailId";
  @SerializedName(SERIALIZED_NAME_EMAIL_ID)
  private String emailId;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public ConsumerData() {
  }

  public ConsumerData billNumber(String billNumber) {
    this.billNumber = billNumber;
    return this;
  }

   /**
   * The invoice number or bill number. This number could be provided by the merchant or could be an indication for the mobile application to prompt the consumer to input a Bill Number. For example, the Bill Number may be present when the QR Code is used for bill payment.
   * @return billNumber
  **/
  @jakarta.annotation.Nullable
  public String getBillNumber() {
    return billNumber;
  }

  public void setBillNumber(String billNumber) {
    this.billNumber = billNumber;
  }


  public ConsumerData mobileNumber(String mobileNumber) {
    this.mobileNumber = mobileNumber;
    return this;
  }

   /**
   * The mobile number could be provided by the merchant or could be an indication for the mobile application to prompt the consumer to input a Mobile Number. For example, the Mobile Number to be used for multiple use cases, such as mobile top-up and bill payment.
   * @return mobileNumber
  **/
  @jakarta.annotation.Nullable
  public String getMobileNumber() {
    return mobileNumber;
  }

  public void setMobileNumber(String mobileNumber) {
    this.mobileNumber = mobileNumber;
  }


  public ConsumerData storeLabel(String storeLabel) {
    this.storeLabel = storeLabel;
    return this;
  }

   /**
   * A distinctive value associated to a store. This value could be provided by the merchant or could be an indication for the mobile application to prompt the consumer to input a Store Label. For example, the Store Label may be displayed to the consumer on the mobile application identifying a specific store.
   * @return storeLabel
  **/
  @jakarta.annotation.Nullable
  public String getStoreLabel() {
    return storeLabel;
  }

  public void setStoreLabel(String storeLabel) {
    this.storeLabel = storeLabel;
  }


  public ConsumerData loyaltyNumber(String loyaltyNumber) {
    this.loyaltyNumber = loyaltyNumber;
    return this;
  }

   /**
   * Typically, a loyalty card number. This number could be provided by the merchant, if known, or could be an indication for the mobile application to prompt the consumer to input their Loyalty Number.
   * @return loyaltyNumber
  **/
  @jakarta.annotation.Nullable
  public String getLoyaltyNumber() {
    return loyaltyNumber;
  }

  public void setLoyaltyNumber(String loyaltyNumber) {
    this.loyaltyNumber = loyaltyNumber;
  }


  public ConsumerData referenceLabel(String referenceLabel) {
    this.referenceLabel = referenceLabel;
    return this;
  }

   /**
   * Any value as defined by the merchant or acquirer in order to identify the transaction. This value could be provided by the merchant or could be an indication for the mobile app to prompt the consumer to input a transaction Reference Label. For example, the Reference Label may be used by the consumer mobile application for transaction logging or receipt display.
   * @return referenceLabel
  **/
  @jakarta.annotation.Nullable
  public String getReferenceLabel() {
    return referenceLabel;
  }

  public void setReferenceLabel(String referenceLabel) {
    this.referenceLabel = referenceLabel;
  }


  public ConsumerData customerLabel(String customerLabel) {
    this.customerLabel = customerLabel;
    return this;
  }

   /**
   * Any value identifying a specific consumer. This value could be provided by the merchant (if known), or could be an indication for the mobile application to prompt the consumer to input their Customer Label. For example, the Customer Label may be a subscriber ID for subscription services, a student enrolment number, etc.
   * @return customerLabel
  **/
  @jakarta.annotation.Nullable
  public String getCustomerLabel() {
    return customerLabel;
  }

  public void setCustomerLabel(String customerLabel) {
    this.customerLabel = customerLabel;
  }


  public ConsumerData terminalLabel(String terminalLabel) {
    this.terminalLabel = terminalLabel;
    return this;
  }

   /**
   * Populated with a Consumer-entered terminal label if the Terminal Label (ID \&quot;07\&quot;), with a value of \&quot;***\&quot;, is present within the Additional Data Field Template (ID \&quot;62\&quot;) of the QR Code Payload
   * @return terminalLabel
  **/
  @jakarta.annotation.Nullable
  public String getTerminalLabel() {
    return terminalLabel;
  }

  public void setTerminalLabel(String terminalLabel) {
    this.terminalLabel = terminalLabel;
  }


  public ConsumerData purposeOftransaction(String purposeOftransaction) {
    this.purposeOftransaction = purposeOftransaction;
    return this;
  }

   /**
   * Any value identifying a specific consumer. This value could be provided by the merchant (if known), or could be an indication for the mobile application to prompt the consumer to input their Customer Label. For example, the Customer Label may be a subscriber ID for subscription services, a student enrolment number, etc.
   * @return purposeOftransaction
  **/
  @jakarta.annotation.Nullable
  public String getPurposeOftransaction() {
    return purposeOftransaction;
  }

  public void setPurposeOftransaction(String purposeOftransaction) {
    this.purposeOftransaction = purposeOftransaction;
  }


  public ConsumerData emailId(String emailId) {
    this.emailId = emailId;
    return this;
  }

   /**
   * Email address of the consumer.
   * @return emailId
  **/
  @jakarta.annotation.Nullable
  public String getEmailId() {
    return emailId;
  }

  public void setEmailId(String emailId) {
    this.emailId = emailId;
  }


  public ConsumerData phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Mobile number of the consumer.
   * @return phoneNumber
  **/
  @jakarta.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public ConsumerData address(String address) {
    this.address = address;
    return this;
  }

   /**
   * Address of the consumer.
   * @return address
  **/
  @jakarta.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ConsumerData instance itself
   */
  public ConsumerData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsumerData consumerData = (ConsumerData) o;
    return Objects.equals(this.billNumber, consumerData.billNumber) &&
        Objects.equals(this.mobileNumber, consumerData.mobileNumber) &&
        Objects.equals(this.storeLabel, consumerData.storeLabel) &&
        Objects.equals(this.loyaltyNumber, consumerData.loyaltyNumber) &&
        Objects.equals(this.referenceLabel, consumerData.referenceLabel) &&
        Objects.equals(this.customerLabel, consumerData.customerLabel) &&
        Objects.equals(this.terminalLabel, consumerData.terminalLabel) &&
        Objects.equals(this.purposeOftransaction, consumerData.purposeOftransaction) &&
        Objects.equals(this.emailId, consumerData.emailId) &&
        Objects.equals(this.phoneNumber, consumerData.phoneNumber) &&
        Objects.equals(this.address, consumerData.address)&&
        Objects.equals(this.additionalProperties, consumerData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billNumber, mobileNumber, storeLabel, loyaltyNumber, referenceLabel, customerLabel, terminalLabel, purposeOftransaction, emailId, phoneNumber, address, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsumerData {\n");
    sb.append("    billNumber: ").append(toIndentedString(billNumber)).append("\n");
    sb.append("    mobileNumber: ").append(toIndentedString(mobileNumber)).append("\n");
    sb.append("    storeLabel: ").append(toIndentedString(storeLabel)).append("\n");
    sb.append("    loyaltyNumber: ").append(toIndentedString(loyaltyNumber)).append("\n");
    sb.append("    referenceLabel: ").append(toIndentedString(referenceLabel)).append("\n");
    sb.append("    customerLabel: ").append(toIndentedString(customerLabel)).append("\n");
    sb.append("    terminalLabel: ").append(toIndentedString(terminalLabel)).append("\n");
    sb.append("    purposeOftransaction: ").append(toIndentedString(purposeOftransaction)).append("\n");
    sb.append("    emailId: ").append(toIndentedString(emailId)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billNumber");
    openapiFields.add("mobileNumber");
    openapiFields.add("storeLabel");
    openapiFields.add("loyaltyNumber");
    openapiFields.add("referenceLabel");
    openapiFields.add("customerLabel");
    openapiFields.add("terminalLabel");
    openapiFields.add("purposeOftransaction");
    openapiFields.add("emailId");
    openapiFields.add("phoneNumber");
    openapiFields.add("address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ConsumerData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsumerData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsumerData is not found in the empty JSON string", ConsumerData.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billNumber") != null && !jsonObj.get("billNumber").isJsonNull()) && !jsonObj.get("billNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billNumber").toString()));
      }
      if ((jsonObj.get("mobileNumber") != null && !jsonObj.get("mobileNumber").isJsonNull()) && !jsonObj.get("mobileNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileNumber").toString()));
      }
      if ((jsonObj.get("storeLabel") != null && !jsonObj.get("storeLabel").isJsonNull()) && !jsonObj.get("storeLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeLabel").toString()));
      }
      if ((jsonObj.get("loyaltyNumber") != null && !jsonObj.get("loyaltyNumber").isJsonNull()) && !jsonObj.get("loyaltyNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loyaltyNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loyaltyNumber").toString()));
      }
      if ((jsonObj.get("referenceLabel") != null && !jsonObj.get("referenceLabel").isJsonNull()) && !jsonObj.get("referenceLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceLabel").toString()));
      }
      if ((jsonObj.get("customerLabel") != null && !jsonObj.get("customerLabel").isJsonNull()) && !jsonObj.get("customerLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerLabel").toString()));
      }
      if ((jsonObj.get("terminalLabel") != null && !jsonObj.get("terminalLabel").isJsonNull()) && !jsonObj.get("terminalLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminalLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminalLabel").toString()));
      }
      if ((jsonObj.get("purposeOftransaction") != null && !jsonObj.get("purposeOftransaction").isJsonNull()) && !jsonObj.get("purposeOftransaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purposeOftransaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purposeOftransaction").toString()));
      }
      if ((jsonObj.get("emailId") != null && !jsonObj.get("emailId").isJsonNull()) && !jsonObj.get("emailId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailId").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsumerData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsumerData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsumerData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsumerData.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsumerData>() {
           @Override
           public void write(JsonWriter out, ConsumerData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsumerData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ConsumerData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConsumerData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConsumerData
  * @throws IOException if the JSON string is invalid with respect to ConsumerData
  */
  public static ConsumerData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsumerData.class);
  }

 /**
  * Convert an instance of ConsumerData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

