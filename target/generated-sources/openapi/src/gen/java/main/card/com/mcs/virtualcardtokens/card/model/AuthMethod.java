/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.card.model.UriData;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.card.invoker.JSON;

/**
 * One of the supported methods available for authenticating the enrolled card. Each supported method will have individual objects with related information under it.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:04.218510319Z[Etc/UTC]")
public class AuthMethod {
  /**
   * Type of authenticationCredential being used by the Issuer to authenticate the consumer. The authenticationMethodType will dictate the content of the authenticationCredential parameter.
   */
  @JsonAdapter(AuthenticationMethodTypeEnum.Adapter.class)
  public enum AuthenticationMethodTypeEnum {
    _3DS("3DS"),
    
    MANAGED_AUTHENTICATION("MANAGED_AUTHENTICATION");

    private String value;

    AuthenticationMethodTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationMethodTypeEnum fromValue(String value) {
      for (AuthenticationMethodTypeEnum b : AuthenticationMethodTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationMethodTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationMethodTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationMethodTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationMethodTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationMethodTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_METHOD_TYPE = "authenticationMethodType";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_METHOD_TYPE)
  private AuthenticationMethodTypeEnum authenticationMethodType;

  public static final String SERIALIZED_NAME_AUTHENTICATION_SUBJECT = "authenticationSubject";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_SUBJECT)
  private String authenticationSubject;

  public static final String SERIALIZED_NAME_AUTHENTICATION_CREDENTIAL_REFERENCE = "authenticationCredentialReference";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_CREDENTIAL_REFERENCE)
  private String authenticationCredentialReference;

  public static final String SERIALIZED_NAME_URI_DATA = "uriData";
  @SerializedName(SERIALIZED_NAME_URI_DATA)
  private UriData uriData;

  public AuthMethod() {
  }

  public AuthMethod authenticationMethodType(AuthenticationMethodTypeEnum authenticationMethodType) {
    this.authenticationMethodType = authenticationMethodType;
    return this;
  }

   /**
   * Type of authenticationCredential being used by the Issuer to authenticate the consumer. The authenticationMethodType will dictate the content of the authenticationCredential parameter.
   * @return authenticationMethodType
  **/
  @jakarta.annotation.Nullable
  public AuthenticationMethodTypeEnum getAuthenticationMethodType() {
    return authenticationMethodType;
  }

  public void setAuthenticationMethodType(AuthenticationMethodTypeEnum authenticationMethodType) {
    this.authenticationMethodType = authenticationMethodType;
  }


  public AuthMethod authenticationSubject(String authenticationSubject) {
    this.authenticationSubject = authenticationSubject;
    return this;
  }

   /**
   * The entity which is the subject of this authentication request.
   * @return authenticationSubject
  **/
  @jakarta.annotation.Nullable
  public String getAuthenticationSubject() {
    return authenticationSubject;
  }

  public void setAuthenticationSubject(String authenticationSubject) {
    this.authenticationSubject = authenticationSubject;
  }


  public AuthMethod authenticationCredentialReference(String authenticationCredentialReference) {
    this.authenticationCredentialReference = authenticationCredentialReference;
    return this;
  }

   /**
   * The credential of the entity which is the subject of this authentication request.
   * @return authenticationCredentialReference
  **/
  @jakarta.annotation.Nullable
  public String getAuthenticationCredentialReference() {
    return authenticationCredentialReference;
  }

  public void setAuthenticationCredentialReference(String authenticationCredentialReference) {
    this.authenticationCredentialReference = authenticationCredentialReference;
  }


  public AuthMethod uriData(UriData uriData) {
    this.uriData = uriData;
    return this;
  }

   /**
   * Get uriData
   * @return uriData
  **/
  @jakarta.annotation.Nullable
  public UriData getUriData() {
    return uriData;
  }

  public void setUriData(UriData uriData) {
    this.uriData = uriData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AuthMethod instance itself
   */
  public AuthMethod putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthMethod authMethod = (AuthMethod) o;
    return Objects.equals(this.authenticationMethodType, authMethod.authenticationMethodType) &&
        Objects.equals(this.authenticationSubject, authMethod.authenticationSubject) &&
        Objects.equals(this.authenticationCredentialReference, authMethod.authenticationCredentialReference) &&
        Objects.equals(this.uriData, authMethod.uriData)&&
        Objects.equals(this.additionalProperties, authMethod.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationMethodType, authenticationSubject, authenticationCredentialReference, uriData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthMethod {\n");
    sb.append("    authenticationMethodType: ").append(toIndentedString(authenticationMethodType)).append("\n");
    sb.append("    authenticationSubject: ").append(toIndentedString(authenticationSubject)).append("\n");
    sb.append("    authenticationCredentialReference: ").append(toIndentedString(authenticationCredentialReference)).append("\n");
    sb.append("    uriData: ").append(toIndentedString(uriData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationMethodType");
    openapiFields.add("authenticationSubject");
    openapiFields.add("authenticationCredentialReference");
    openapiFields.add("uriData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AuthMethod
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthMethod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthMethod is not found in the empty JSON string", AuthMethod.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authenticationMethodType") != null && !jsonObj.get("authenticationMethodType").isJsonNull()) && !jsonObj.get("authenticationMethodType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationMethodType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationMethodType").toString()));
      }
      // validate the optional field `authenticationMethodType`
      if (jsonObj.get("authenticationMethodType") != null && !jsonObj.get("authenticationMethodType").isJsonNull()) {
        AuthenticationMethodTypeEnum.validateJsonElement(jsonObj.get("authenticationMethodType"));
      }
      if ((jsonObj.get("authenticationSubject") != null && !jsonObj.get("authenticationSubject").isJsonNull()) && !jsonObj.get("authenticationSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationSubject").toString()));
      }
      if ((jsonObj.get("authenticationCredentialReference") != null && !jsonObj.get("authenticationCredentialReference").isJsonNull()) && !jsonObj.get("authenticationCredentialReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationCredentialReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationCredentialReference").toString()));
      }
      // validate the optional field `uriData`
      if (jsonObj.get("uriData") != null && !jsonObj.get("uriData").isJsonNull()) {
        UriData.validateJsonElement(jsonObj.get("uriData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthMethod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthMethod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthMethod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthMethod.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthMethod>() {
           @Override
           public void write(JsonWriter out, AuthMethod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthMethod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AuthMethod instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthMethod given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthMethod
  * @throws IOException if the JSON string is invalid with respect to AuthMethod
  */
  public static AuthMethod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthMethod.class);
  }

 /**
  * Convert an instance of AuthMethod to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

