/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Type of enrolmentReferenceData being passed to Mastercard Checkout Solutions (MCS) for enrollment. The enrolmentReferenceType will dictate the content of the enrolmentReferenceId parameter. Accepted enums are:  * &#x60;EXISTING_TOKEN_UNIQUE_REFERENCE&#x60; - Used by MDES for Merchant (M4M) Integrators to exchange their M4M Token Unique Reference (TUR) for a Secure Card on File (SCOF) srcDigitalCardId.  * &#x60;TOKEN_UNIQUE_REFERENCE&#x60; - A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime. Must be a valid reference as assigned by MCS.  * &#x60;SRC_DIGITAL_CARD_ID&#x60; - Unique identifier for a token associated with a card enrolled in MCS. This is used to convert Click to Pay (C2P) guest checkout credentials into cards on file. The value of the srcDigitalCardId must be provided in the enrolmentReferenceId parameter.  * &#x60;PUSH_ACCOUNT_RECEIPT&#x60; - Data that comes from the Issuer, in coordination with Mastercard, to facilitate enrolling a card through push provisioning. 
 */
@JsonAdapter(EnrolmentReferenceType.Adapter.class)
public enum EnrolmentReferenceType {
  
  EXISTING_TOKEN_UNIQUE_REFERENCE("EXISTING_TOKEN_UNIQUE_REFERENCE"),
  
  TOKEN_UNIQUE_REFERENCE("TOKEN_UNIQUE_REFERENCE"),
  
  PUSH_ACCOUNT_RECEIPT("PUSH_ACCOUNT_RECEIPT"),
  
  SRC_DIGITAL_CARD_ID("SRC_DIGITAL_CARD_ID");

  private String value;

  EnrolmentReferenceType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EnrolmentReferenceType fromValue(String value) {
    for (EnrolmentReferenceType b : EnrolmentReferenceType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EnrolmentReferenceType> {
    @Override
    public void write(final JsonWriter jsonWriter, final EnrolmentReferenceType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EnrolmentReferenceType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EnrolmentReferenceType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    EnrolmentReferenceType.fromValue(value);
  }
}

