/*
 * Mastercard Virtual Card Token Checkout API
 * Checkout end point used by Mastercard Virtual Card Token Integrators to receive payload data from the Mastercard Checkout Solutions and send the results of transaction authorization back to the Mastercard. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.checkout.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.checkout.invoker.JSON;

/**
 * Object for token meta data.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:06.789601445Z[Etc/UTC]")
public class PaymentToken {
  public static final String SERIALIZED_NAME_PAYMENT_TOKEN = "paymentToken";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TOKEN)
  private String paymentToken;

  public static final String SERIALIZED_NAME_TOKEN_EXPIRATION_MONTH = "tokenExpirationMonth";
  @SerializedName(SERIALIZED_NAME_TOKEN_EXPIRATION_MONTH)
  private String tokenExpirationMonth;

  public static final String SERIALIZED_NAME_TOKEN_EXPIRATION_YEAR = "tokenExpirationYear";
  @SerializedName(SERIALIZED_NAME_TOKEN_EXPIRATION_YEAR)
  private String tokenExpirationYear;

  public static final String SERIALIZED_NAME_PAYMENT_ACCOUNT_REFERENCE = "paymentAccountReference";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ACCOUNT_REFERENCE)
  private String paymentAccountReference;

  public static final String SERIALIZED_NAME_PAN_SEQUENCE_NUMBER = "panSequenceNumber";
  @SerializedName(SERIALIZED_NAME_PAN_SEQUENCE_NUMBER)
  private String panSequenceNumber;

  public PaymentToken() {
  }

  public PaymentToken paymentToken(String paymentToken) {
    this.paymentToken = paymentToken;
    return this;
  }

   /**
   * The unique token for the enrolled PAN which can be used in authorization as per ISO/IEC 7812 format.
   * @return paymentToken
  **/
  @jakarta.annotation.Nonnull
  public String getPaymentToken() {
    return paymentToken;
  }

  public void setPaymentToken(String paymentToken) {
    this.paymentToken = paymentToken;
  }


  public PaymentToken tokenExpirationMonth(String tokenExpirationMonth) {
    this.tokenExpirationMonth = tokenExpirationMonth;
    return this;
  }

   /**
   * Expiration month of the token expressed as a two-digit calendar month. Supplied when specified for the Payment Token. 
   * @return tokenExpirationMonth
  **/
  @jakarta.annotation.Nullable
  public String getTokenExpirationMonth() {
    return tokenExpirationMonth;
  }

  public void setTokenExpirationMonth(String tokenExpirationMonth) {
    this.tokenExpirationMonth = tokenExpirationMonth;
  }


  public PaymentToken tokenExpirationYear(String tokenExpirationYear) {
    this.tokenExpirationYear = tokenExpirationYear;
    return this;
  }

   /**
   * Expiration year of the token expressed as four-digit calendar year. Supplied when specified for the Payment Token. 
   * @return tokenExpirationYear
  **/
  @jakarta.annotation.Nullable
  public String getTokenExpirationYear() {
    return tokenExpirationYear;
  }

  public void setTokenExpirationYear(String tokenExpirationYear) {
    this.tokenExpirationYear = tokenExpirationYear;
  }


  public PaymentToken paymentAccountReference(String paymentAccountReference) {
    this.paymentAccountReference = paymentAccountReference;
    return this;
  }

   /**
   * A non-financial reference assigned to each unique PAN and used to link a Payment Account represented by that PAN to affiliated Payment Tokens.
   * @return paymentAccountReference
  **/
  @jakarta.annotation.Nullable
  public String getPaymentAccountReference() {
    return paymentAccountReference;
  }

  public void setPaymentAccountReference(String paymentAccountReference) {
    this.paymentAccountReference = paymentAccountReference;
  }


  public PaymentToken panSequenceNumber(String panSequenceNumber) {
    this.panSequenceNumber = panSequenceNumber;
    return this;
  }

   /**
   * Application PAN sequence number for the token that can be provided in DE 23 of authorization.
   * @return panSequenceNumber
  **/
  @jakarta.annotation.Nullable
  public String getPanSequenceNumber() {
    return panSequenceNumber;
  }

  public void setPanSequenceNumber(String panSequenceNumber) {
    this.panSequenceNumber = panSequenceNumber;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentToken instance itself
   */
  public PaymentToken putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentToken paymentToken = (PaymentToken) o;
    return Objects.equals(this.paymentToken, paymentToken.paymentToken) &&
        Objects.equals(this.tokenExpirationMonth, paymentToken.tokenExpirationMonth) &&
        Objects.equals(this.tokenExpirationYear, paymentToken.tokenExpirationYear) &&
        Objects.equals(this.paymentAccountReference, paymentToken.paymentAccountReference) &&
        Objects.equals(this.panSequenceNumber, paymentToken.panSequenceNumber)&&
        Objects.equals(this.additionalProperties, paymentToken.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentToken, tokenExpirationMonth, tokenExpirationYear, paymentAccountReference, panSequenceNumber, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentToken {\n");
    sb.append("    paymentToken: ").append(toIndentedString(paymentToken)).append("\n");
    sb.append("    tokenExpirationMonth: ").append(toIndentedString(tokenExpirationMonth)).append("\n");
    sb.append("    tokenExpirationYear: ").append(toIndentedString(tokenExpirationYear)).append("\n");
    sb.append("    paymentAccountReference: ").append(toIndentedString(paymentAccountReference)).append("\n");
    sb.append("    panSequenceNumber: ").append(toIndentedString(panSequenceNumber)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentToken");
    openapiFields.add("tokenExpirationMonth");
    openapiFields.add("tokenExpirationYear");
    openapiFields.add("paymentAccountReference");
    openapiFields.add("panSequenceNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("paymentToken");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PaymentToken
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentToken is not found in the empty JSON string", PaymentToken.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentToken.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("paymentToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentToken").toString()));
      }
      if ((jsonObj.get("tokenExpirationMonth") != null && !jsonObj.get("tokenExpirationMonth").isJsonNull()) && !jsonObj.get("tokenExpirationMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenExpirationMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenExpirationMonth").toString()));
      }
      if ((jsonObj.get("tokenExpirationYear") != null && !jsonObj.get("tokenExpirationYear").isJsonNull()) && !jsonObj.get("tokenExpirationYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenExpirationYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenExpirationYear").toString()));
      }
      if ((jsonObj.get("paymentAccountReference") != null && !jsonObj.get("paymentAccountReference").isJsonNull()) && !jsonObj.get("paymentAccountReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentAccountReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentAccountReference").toString()));
      }
      if ((jsonObj.get("panSequenceNumber") != null && !jsonObj.get("panSequenceNumber").isJsonNull()) && !jsonObj.get("panSequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panSequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panSequenceNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentToken.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentToken>() {
           @Override
           public void write(JsonWriter out, PaymentToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PaymentToken instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentToken given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentToken
  * @throws IOException if the JSON string is invalid with respect to PaymentToken
  */
  public static PaymentToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentToken.class);
  }

 /**
  * Convert an instance of PaymentToken to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

