/*
 * Mastercard Virtual Card Token Checkout API
 * Checkout end point used by Mastercard Virtual Card Token Integrators to receive payload data from the Mastercard Checkout Solutions and send the results of transaction authorization back to the Mastercard. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.checkout.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.checkout.model.Address;
import com.mcs.virtualcardtokens.checkout.model.Card;
import com.mcs.virtualcardtokens.checkout.model.DynamicData;
import com.mcs.virtualcardtokens.checkout.model.PaymentToken;
import com.mcs.virtualcardtokens.checkout.model.PhoneNumber;
import com.mcs.virtualcardtokens.checkout.model.SrcTokenResultsData;
import com.mcs.virtualcardtokens.checkout.model.ThreeDsOutputData;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.checkout.invoker.JSON;

/**
 * Object for the signed and encrypted payload in JWE format. Refer to Payload object for additional data. 
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:06.789601445Z[Etc/UTC]")
public class Payload {
  public static final String SERIALIZED_NAME_CARD = "card";
  @SerializedName(SERIALIZED_NAME_CARD)
  private Card card;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private PaymentToken token;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shippingAddress";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private Address shippingAddress;

  public static final String SERIALIZED_NAME_CONSUMER_EMAIL_ADDRESS = "consumerEmailAddress";
  @SerializedName(SERIALIZED_NAME_CONSUMER_EMAIL_ADDRESS)
  private String consumerEmailAddress;

  public static final String SERIALIZED_NAME_CONSUMER_FIRST_NAME = "consumerFirstName";
  @SerializedName(SERIALIZED_NAME_CONSUMER_FIRST_NAME)
  private String consumerFirstName;

  public static final String SERIALIZED_NAME_CONSUMER_LAST_NAME = "consumerLastName";
  @SerializedName(SERIALIZED_NAME_CONSUMER_LAST_NAME)
  private String consumerLastName;

  public static final String SERIALIZED_NAME_CONSUMER_FULL_NAME = "consumerFullName";
  @SerializedName(SERIALIZED_NAME_CONSUMER_FULL_NAME)
  private String consumerFullName;

  public static final String SERIALIZED_NAME_CONSUMER_MOBILE_NUMBER = "consumerMobileNumber";
  @SerializedName(SERIALIZED_NAME_CONSUMER_MOBILE_NUMBER)
  private PhoneNumber consumerMobileNumber;

  public static final String SERIALIZED_NAME_CONSUMER_NATIONAL_IDENTIFIER = "consumerNationalIdentifier";
  @SerializedName(SERIALIZED_NAME_CONSUMER_NATIONAL_IDENTIFIER)
  private String consumerNationalIdentifier;

  public static final String SERIALIZED_NAME_SRC_TOKEN_RESULTS_DATA = "srcTokenResultsData";
  @SerializedName(SERIALIZED_NAME_SRC_TOKEN_RESULTS_DATA)
  private SrcTokenResultsData srcTokenResultsData;

  public static final String SERIALIZED_NAME_DYNAMIC_DATA = "dynamicData";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_DATA)
  private DynamicData dynamicData;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Address billingAddress;

  public static final String SERIALIZED_NAME_THREE_DS_OUTPUT_DATA = "threeDsOutputData";
  @SerializedName(SERIALIZED_NAME_THREE_DS_OUTPUT_DATA)
  private ThreeDsOutputData threeDsOutputData;

  public Payload() {
  }

  public Payload card(Card card) {
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @jakarta.annotation.Nullable
  public Card getCard() {
    return card;
  }

  public void setCard(Card card) {
    this.card = card;
  }


  public Payload token(PaymentToken token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @jakarta.annotation.Nullable
  public PaymentToken getToken() {
    return token;
  }

  public void setToken(PaymentToken token) {
    this.token = token;
  }


  public Payload shippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Get shippingAddress
   * @return shippingAddress
  **/
  @jakarta.annotation.Nullable
  public Address getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public Payload consumerEmailAddress(String consumerEmailAddress) {
    this.consumerEmailAddress = consumerEmailAddress;
    return this;
  }

   /**
   * Consumer-provided email address.
   * @return consumerEmailAddress
  **/
  @jakarta.annotation.Nullable
  public String getConsumerEmailAddress() {
    return consumerEmailAddress;
  }

  public void setConsumerEmailAddress(String consumerEmailAddress) {
    this.consumerEmailAddress = consumerEmailAddress;
  }


  public Payload consumerFirstName(String consumerFirstName) {
    this.consumerFirstName = consumerFirstName;
    return this;
  }

   /**
   * Consumer-provided first name.
   * @return consumerFirstName
  **/
  @jakarta.annotation.Nullable
  public String getConsumerFirstName() {
    return consumerFirstName;
  }

  public void setConsumerFirstName(String consumerFirstName) {
    this.consumerFirstName = consumerFirstName;
  }


  public Payload consumerLastName(String consumerLastName) {
    this.consumerLastName = consumerLastName;
    return this;
  }

   /**
   * Consumer-provided last name.
   * @return consumerLastName
  **/
  @jakarta.annotation.Nullable
  public String getConsumerLastName() {
    return consumerLastName;
  }

  public void setConsumerLastName(String consumerLastName) {
    this.consumerLastName = consumerLastName;
  }


  public Payload consumerFullName(String consumerFullName) {
    this.consumerFullName = consumerFullName;
    return this;
  }

   /**
   * Consumer-provided full name.
   * @return consumerFullName
  **/
  @jakarta.annotation.Nullable
  public String getConsumerFullName() {
    return consumerFullName;
  }

  public void setConsumerFullName(String consumerFullName) {
    this.consumerFullName = consumerFullName;
  }


  public Payload consumerMobileNumber(PhoneNumber consumerMobileNumber) {
    this.consumerMobileNumber = consumerMobileNumber;
    return this;
  }

   /**
   * Get consumerMobileNumber
   * @return consumerMobileNumber
  **/
  @jakarta.annotation.Nullable
  public PhoneNumber getConsumerMobileNumber() {
    return consumerMobileNumber;
  }

  public void setConsumerMobileNumber(PhoneNumber consumerMobileNumber) {
    this.consumerMobileNumber = consumerMobileNumber;
  }


  public Payload consumerNationalIdentifier(String consumerNationalIdentifier) {
    this.consumerNationalIdentifier = consumerNationalIdentifier;
    return this;
  }

   /**
   * Geographic-specific, nationally-provided identifier for the Consumer.
   * @return consumerNationalIdentifier
  **/
  @jakarta.annotation.Nullable
  public String getConsumerNationalIdentifier() {
    return consumerNationalIdentifier;
  }

  public void setConsumerNationalIdentifier(String consumerNationalIdentifier) {
    this.consumerNationalIdentifier = consumerNationalIdentifier;
  }


  public Payload srcTokenResultsData(SrcTokenResultsData srcTokenResultsData) {
    this.srcTokenResultsData = srcTokenResultsData;
    return this;
  }

   /**
   * Get srcTokenResultsData
   * @return srcTokenResultsData
  **/
  @jakarta.annotation.Nullable
  public SrcTokenResultsData getSrcTokenResultsData() {
    return srcTokenResultsData;
  }

  public void setSrcTokenResultsData(SrcTokenResultsData srcTokenResultsData) {
    this.srcTokenResultsData = srcTokenResultsData;
  }


  public Payload dynamicData(DynamicData dynamicData) {
    this.dynamicData = dynamicData;
    return this;
  }

   /**
   * Get dynamicData
   * @return dynamicData
  **/
  @jakarta.annotation.Nullable
  public DynamicData getDynamicData() {
    return dynamicData;
  }

  public void setDynamicData(DynamicData dynamicData) {
    this.dynamicData = dynamicData;
  }


  public Payload billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @jakarta.annotation.Nullable
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }


  public Payload threeDsOutputData(ThreeDsOutputData threeDsOutputData) {
    this.threeDsOutputData = threeDsOutputData;
    return this;
  }

   /**
   * Get threeDsOutputData
   * @return threeDsOutputData
  **/
  @jakarta.annotation.Nullable
  public ThreeDsOutputData getThreeDsOutputData() {
    return threeDsOutputData;
  }

  public void setThreeDsOutputData(ThreeDsOutputData threeDsOutputData) {
    this.threeDsOutputData = threeDsOutputData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Payload instance itself
   */
  public Payload putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payload payload = (Payload) o;
    return Objects.equals(this.card, payload.card) &&
        Objects.equals(this.token, payload.token) &&
        Objects.equals(this.shippingAddress, payload.shippingAddress) &&
        Objects.equals(this.consumerEmailAddress, payload.consumerEmailAddress) &&
        Objects.equals(this.consumerFirstName, payload.consumerFirstName) &&
        Objects.equals(this.consumerLastName, payload.consumerLastName) &&
        Objects.equals(this.consumerFullName, payload.consumerFullName) &&
        Objects.equals(this.consumerMobileNumber, payload.consumerMobileNumber) &&
        Objects.equals(this.consumerNationalIdentifier, payload.consumerNationalIdentifier) &&
        Objects.equals(this.srcTokenResultsData, payload.srcTokenResultsData) &&
        Objects.equals(this.dynamicData, payload.dynamicData) &&
        Objects.equals(this.billingAddress, payload.billingAddress) &&
        Objects.equals(this.threeDsOutputData, payload.threeDsOutputData)&&
        Objects.equals(this.additionalProperties, payload.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(card, token, shippingAddress, consumerEmailAddress, consumerFirstName, consumerLastName, consumerFullName, consumerMobileNumber, consumerNationalIdentifier, srcTokenResultsData, dynamicData, billingAddress, threeDsOutputData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payload {\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    consumerEmailAddress: ").append(toIndentedString(consumerEmailAddress)).append("\n");
    sb.append("    consumerFirstName: ").append(toIndentedString(consumerFirstName)).append("\n");
    sb.append("    consumerLastName: ").append(toIndentedString(consumerLastName)).append("\n");
    sb.append("    consumerFullName: ").append(toIndentedString(consumerFullName)).append("\n");
    sb.append("    consumerMobileNumber: ").append(toIndentedString(consumerMobileNumber)).append("\n");
    sb.append("    consumerNationalIdentifier: ").append(toIndentedString(consumerNationalIdentifier)).append("\n");
    sb.append("    srcTokenResultsData: ").append(toIndentedString(srcTokenResultsData)).append("\n");
    sb.append("    dynamicData: ").append(toIndentedString(dynamicData)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    threeDsOutputData: ").append(toIndentedString(threeDsOutputData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card");
    openapiFields.add("token");
    openapiFields.add("shippingAddress");
    openapiFields.add("consumerEmailAddress");
    openapiFields.add("consumerFirstName");
    openapiFields.add("consumerLastName");
    openapiFields.add("consumerFullName");
    openapiFields.add("consumerMobileNumber");
    openapiFields.add("consumerNationalIdentifier");
    openapiFields.add("srcTokenResultsData");
    openapiFields.add("dynamicData");
    openapiFields.add("billingAddress");
    openapiFields.add("threeDsOutputData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Payload
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Payload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Payload is not found in the empty JSON string", Payload.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `card`
      if (jsonObj.get("card") != null && !jsonObj.get("card").isJsonNull()) {
        Card.validateJsonElement(jsonObj.get("card"));
      }
      // validate the optional field `token`
      if (jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) {
        PaymentToken.validateJsonElement(jsonObj.get("token"));
      }
      // validate the optional field `shippingAddress`
      if (jsonObj.get("shippingAddress") != null && !jsonObj.get("shippingAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("shippingAddress"));
      }
      if ((jsonObj.get("consumerEmailAddress") != null && !jsonObj.get("consumerEmailAddress").isJsonNull()) && !jsonObj.get("consumerEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerEmailAddress").toString()));
      }
      if ((jsonObj.get("consumerFirstName") != null && !jsonObj.get("consumerFirstName").isJsonNull()) && !jsonObj.get("consumerFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerFirstName").toString()));
      }
      if ((jsonObj.get("consumerLastName") != null && !jsonObj.get("consumerLastName").isJsonNull()) && !jsonObj.get("consumerLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerLastName").toString()));
      }
      if ((jsonObj.get("consumerFullName") != null && !jsonObj.get("consumerFullName").isJsonNull()) && !jsonObj.get("consumerFullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerFullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerFullName").toString()));
      }
      // validate the optional field `consumerMobileNumber`
      if (jsonObj.get("consumerMobileNumber") != null && !jsonObj.get("consumerMobileNumber").isJsonNull()) {
        PhoneNumber.validateJsonElement(jsonObj.get("consumerMobileNumber"));
      }
      if ((jsonObj.get("consumerNationalIdentifier") != null && !jsonObj.get("consumerNationalIdentifier").isJsonNull()) && !jsonObj.get("consumerNationalIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerNationalIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerNationalIdentifier").toString()));
      }
      // validate the optional field `srcTokenResultsData`
      if (jsonObj.get("srcTokenResultsData") != null && !jsonObj.get("srcTokenResultsData").isJsonNull()) {
        SrcTokenResultsData.validateJsonElement(jsonObj.get("srcTokenResultsData"));
      }
      // validate the optional field `dynamicData`
      if (jsonObj.get("dynamicData") != null && !jsonObj.get("dynamicData").isJsonNull()) {
        DynamicData.validateJsonElement(jsonObj.get("dynamicData"));
      }
      // validate the optional field `billingAddress`
      if (jsonObj.get("billingAddress") != null && !jsonObj.get("billingAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("billingAddress"));
      }
      // validate the optional field `threeDsOutputData`
      if (jsonObj.get("threeDsOutputData") != null && !jsonObj.get("threeDsOutputData").isJsonNull()) {
        ThreeDsOutputData.validateJsonElement(jsonObj.get("threeDsOutputData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Payload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Payload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Payload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Payload.class));

       return (TypeAdapter<T>) new TypeAdapter<Payload>() {
           @Override
           public void write(JsonWriter out, Payload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Payload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Payload instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Payload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Payload
  * @throws IOException if the JSON string is invalid with respect to Payload
  */
  public static Payload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Payload.class);
  }

 /**
  * Convert an instance of Payload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

