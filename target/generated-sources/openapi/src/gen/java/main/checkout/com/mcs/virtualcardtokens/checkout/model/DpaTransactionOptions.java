/*
 * Mastercard Virtual Card Token Checkout API
 * Checkout end point used by Mastercard Virtual Card Token Integrators to receive payload data from the Mastercard Checkout Solutions and send the results of transaction authorization back to the Mastercard. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.checkout.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.checkout.model.PaymentOptions;
import com.mcs.virtualcardtokens.checkout.model.SrcTokenRequestData;
import com.mcs.virtualcardtokens.checkout.model.ThreeDsInputData;
import com.mcs.virtualcardtokens.checkout.model.ThreeDsPreference;
import com.mcs.virtualcardtokens.checkout.model.TransactionAmount;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.checkout.invoker.JSON;

/**
 * Object for Integrator to indicate checkout payload related preferences. 
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:06.789601445Z[Etc/UTC]")
public class DpaTransactionOptions {
  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "transactionAmount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private TransactionAmount transactionAmount;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_CODE = "merchantCategoryCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_CODE)
  private String merchantCategoryCode;

  public static final String SERIALIZED_NAME_MERCHANT_COUNTRY_CODE = "merchantCountryCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_COUNTRY_CODE)
  private String merchantCountryCode;

  public static final String SERIALIZED_NAME_THREE_DS_PREFERENCE = "threeDsPreference";
  @SerializedName(SERIALIZED_NAME_THREE_DS_PREFERENCE)
  private ThreeDsPreference threeDsPreference;

  public static final String SERIALIZED_NAME_THREE_DS_INPUT_DATA = "threeDsInputData";
  @SerializedName(SERIALIZED_NAME_THREE_DS_INPUT_DATA)
  private ThreeDsInputData threeDsInputData;

  public static final String SERIALIZED_NAME_SRC_TOKEN_REQUEST_DATA = "srcTokenRequestData";
  @SerializedName(SERIALIZED_NAME_SRC_TOKEN_REQUEST_DATA)
  private SrcTokenRequestData srcTokenRequestData;

  public static final String SERIALIZED_NAME_PAYMENT_OPTIONS = "paymentOptions";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTIONS)
  private List<PaymentOptions> paymentOptions;

  public static final String SERIALIZED_NAME_DPA_LOCALE = "dpaLocale";
  @SerializedName(SERIALIZED_NAME_DPA_LOCALE)
  private String dpaLocale;

  public DpaTransactionOptions() {
  }

  public DpaTransactionOptions transactionAmount(TransactionAmount transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * Get transactionAmount
   * @return transactionAmount
  **/
  @jakarta.annotation.Nullable
  public TransactionAmount getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(TransactionAmount transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  public DpaTransactionOptions merchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

   /**
   * Describes the merchantâ€™s type of business, product or service. The same value is expected in the authorization request.
   * @return merchantCategoryCode
  **/
  @jakarta.annotation.Nullable
  public String getMerchantCategoryCode() {
    return merchantCategoryCode;
  }

  public void setMerchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }


  public DpaTransactionOptions merchantCountryCode(String merchantCountryCode) {
    this.merchantCountryCode = merchantCountryCode;
    return this;
  }

   /**
   * Country code of the merchant.
   * @return merchantCountryCode
  **/
  @jakarta.annotation.Nullable
  public String getMerchantCountryCode() {
    return merchantCountryCode;
  }

  public void setMerchantCountryCode(String merchantCountryCode) {
    this.merchantCountryCode = merchantCountryCode;
  }


  public DpaTransactionOptions threeDsPreference(ThreeDsPreference threeDsPreference) {
    this.threeDsPreference = threeDsPreference;
    return this;
  }

   /**
   * Get threeDsPreference
   * @return threeDsPreference
  **/
  @jakarta.annotation.Nullable
  public ThreeDsPreference getThreeDsPreference() {
    return threeDsPreference;
  }

  public void setThreeDsPreference(ThreeDsPreference threeDsPreference) {
    this.threeDsPreference = threeDsPreference;
  }


  public DpaTransactionOptions threeDsInputData(ThreeDsInputData threeDsInputData) {
    this.threeDsInputData = threeDsInputData;
    return this;
  }

   /**
   * Get threeDsInputData
   * @return threeDsInputData
  **/
  @jakarta.annotation.Nullable
  public ThreeDsInputData getThreeDsInputData() {
    return threeDsInputData;
  }

  public void setThreeDsInputData(ThreeDsInputData threeDsInputData) {
    this.threeDsInputData = threeDsInputData;
  }


  public DpaTransactionOptions srcTokenRequestData(SrcTokenRequestData srcTokenRequestData) {
    this.srcTokenRequestData = srcTokenRequestData;
    return this;
  }

   /**
   * Get srcTokenRequestData
   * @return srcTokenRequestData
  **/
  @jakarta.annotation.Nullable
  public SrcTokenRequestData getSrcTokenRequestData() {
    return srcTokenRequestData;
  }

  public void setSrcTokenRequestData(SrcTokenRequestData srcTokenRequestData) {
    this.srcTokenRequestData = srcTokenRequestData;
  }


  public DpaTransactionOptions paymentOptions(List<PaymentOptions> paymentOptions) {
    this.paymentOptions = paymentOptions;
    return this;
  }

  public DpaTransactionOptions addPaymentOptionsItem(PaymentOptions paymentOptionsItem) {
    if (this.paymentOptions == null) {
      this.paymentOptions = new ArrayList<>();
    }
    this.paymentOptions.add(paymentOptionsItem);
    return this;
  }

   /**
   * Object for the Integrator to define the type of checkout payload they would like to receive.
   * @return paymentOptions
  **/
  @jakarta.annotation.Nullable
  public List<PaymentOptions> getPaymentOptions() {
    return paymentOptions;
  }

  public void setPaymentOptions(List<PaymentOptions> paymentOptions) {
    this.paymentOptions = paymentOptions;
  }


  public DpaTransactionOptions dpaLocale(String dpaLocale) {
    this.dpaLocale = dpaLocale;
    return this;
  }

   /**
   * Merchant&#39;s preferred locale. 
   * @return dpaLocale
  **/
  @jakarta.annotation.Nullable
  public String getDpaLocale() {
    return dpaLocale;
  }

  public void setDpaLocale(String dpaLocale) {
    this.dpaLocale = dpaLocale;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DpaTransactionOptions instance itself
   */
  public DpaTransactionOptions putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DpaTransactionOptions dpaTransactionOptions = (DpaTransactionOptions) o;
    return Objects.equals(this.transactionAmount, dpaTransactionOptions.transactionAmount) &&
        Objects.equals(this.merchantCategoryCode, dpaTransactionOptions.merchantCategoryCode) &&
        Objects.equals(this.merchantCountryCode, dpaTransactionOptions.merchantCountryCode) &&
        Objects.equals(this.threeDsPreference, dpaTransactionOptions.threeDsPreference) &&
        Objects.equals(this.threeDsInputData, dpaTransactionOptions.threeDsInputData) &&
        Objects.equals(this.srcTokenRequestData, dpaTransactionOptions.srcTokenRequestData) &&
        Objects.equals(this.paymentOptions, dpaTransactionOptions.paymentOptions) &&
        Objects.equals(this.dpaLocale, dpaTransactionOptions.dpaLocale)&&
        Objects.equals(this.additionalProperties, dpaTransactionOptions.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionAmount, merchantCategoryCode, merchantCountryCode, threeDsPreference, threeDsInputData, srcTokenRequestData, paymentOptions, dpaLocale, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DpaTransactionOptions {\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("    merchantCountryCode: ").append(toIndentedString(merchantCountryCode)).append("\n");
    sb.append("    threeDsPreference: ").append(toIndentedString(threeDsPreference)).append("\n");
    sb.append("    threeDsInputData: ").append(toIndentedString(threeDsInputData)).append("\n");
    sb.append("    srcTokenRequestData: ").append(toIndentedString(srcTokenRequestData)).append("\n");
    sb.append("    paymentOptions: ").append(toIndentedString(paymentOptions)).append("\n");
    sb.append("    dpaLocale: ").append(toIndentedString(dpaLocale)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionAmount");
    openapiFields.add("merchantCategoryCode");
    openapiFields.add("merchantCountryCode");
    openapiFields.add("threeDsPreference");
    openapiFields.add("threeDsInputData");
    openapiFields.add("srcTokenRequestData");
    openapiFields.add("paymentOptions");
    openapiFields.add("dpaLocale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DpaTransactionOptions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DpaTransactionOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DpaTransactionOptions is not found in the empty JSON string", DpaTransactionOptions.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `transactionAmount`
      if (jsonObj.get("transactionAmount") != null && !jsonObj.get("transactionAmount").isJsonNull()) {
        TransactionAmount.validateJsonElement(jsonObj.get("transactionAmount"));
      }
      if ((jsonObj.get("merchantCategoryCode") != null && !jsonObj.get("merchantCategoryCode").isJsonNull()) && !jsonObj.get("merchantCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCategoryCode").toString()));
      }
      if ((jsonObj.get("merchantCountryCode") != null && !jsonObj.get("merchantCountryCode").isJsonNull()) && !jsonObj.get("merchantCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCountryCode").toString()));
      }
      // validate the optional field `threeDsPreference`
      if (jsonObj.get("threeDsPreference") != null && !jsonObj.get("threeDsPreference").isJsonNull()) {
        ThreeDsPreference.validateJsonElement(jsonObj.get("threeDsPreference"));
      }
      // validate the optional field `threeDsInputData`
      if (jsonObj.get("threeDsInputData") != null && !jsonObj.get("threeDsInputData").isJsonNull()) {
        ThreeDsInputData.validateJsonElement(jsonObj.get("threeDsInputData"));
      }
      // validate the optional field `srcTokenRequestData`
      if (jsonObj.get("srcTokenRequestData") != null && !jsonObj.get("srcTokenRequestData").isJsonNull()) {
        SrcTokenRequestData.validateJsonElement(jsonObj.get("srcTokenRequestData"));
      }
      if (jsonObj.get("paymentOptions") != null && !jsonObj.get("paymentOptions").isJsonNull()) {
        JsonArray jsonArraypaymentOptions = jsonObj.getAsJsonArray("paymentOptions");
        if (jsonArraypaymentOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentOptions` to be an array in the JSON string but got `%s`", jsonObj.get("paymentOptions").toString()));
          }

          // validate the optional field `paymentOptions` (array)
          for (int i = 0; i < jsonArraypaymentOptions.size(); i++) {
            PaymentOptions.validateJsonElement(jsonArraypaymentOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("dpaLocale") != null && !jsonObj.get("dpaLocale").isJsonNull()) && !jsonObj.get("dpaLocale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpaLocale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpaLocale").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DpaTransactionOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DpaTransactionOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DpaTransactionOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DpaTransactionOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<DpaTransactionOptions>() {
           @Override
           public void write(JsonWriter out, DpaTransactionOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DpaTransactionOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             DpaTransactionOptions instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DpaTransactionOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DpaTransactionOptions
  * @throws IOException if the JSON string is invalid with respect to DpaTransactionOptions
  */
  public static DpaTransactionOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DpaTransactionOptions.class);
  }

 /**
  * Convert an instance of DpaTransactionOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

