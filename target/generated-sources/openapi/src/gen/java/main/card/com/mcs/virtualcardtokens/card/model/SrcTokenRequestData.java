/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.card.model.AdditionalDataRequested;
import com.mcs.virtualcardtokens.card.model.DecisioningData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.card.invoker.JSON;

/**
 * Object for the Integrator to request additional token meta data be returned in the enroll response. The Integrator may optionally pass decisioningData to support the digitization request.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:04.218510319Z[Etc/UTC]")
public class SrcTokenRequestData {
  public static final String SERIALIZED_NAME_DECISIONING_DATA = "decisioningData";
  @SerializedName(SERIALIZED_NAME_DECISIONING_DATA)
  private DecisioningData decisioningData;

  public static final String SERIALIZED_NAME_ADDITIONAL_DATA_REQUESTED = "additionalDataRequested";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA_REQUESTED)
  private List<AdditionalDataRequested> additionalDataRequested;

  public SrcTokenRequestData() {
  }

  public SrcTokenRequestData decisioningData(DecisioningData decisioningData) {
    this.decisioningData = decisioningData;
    return this;
  }

   /**
   * Get decisioningData
   * @return decisioningData
  **/
  @jakarta.annotation.Nullable
  public DecisioningData getDecisioningData() {
    return decisioningData;
  }

  public void setDecisioningData(DecisioningData decisioningData) {
    this.decisioningData = decisioningData;
  }


  public SrcTokenRequestData additionalDataRequested(List<AdditionalDataRequested> additionalDataRequested) {
    this.additionalDataRequested = additionalDataRequested;
    return this;
  }

  public SrcTokenRequestData addAdditionalDataRequestedItem(AdditionalDataRequested additionalDataRequestedItem) {
    if (this.additionalDataRequested == null) {
      this.additionalDataRequested = new ArrayList<>();
    }
    this.additionalDataRequested.add(additionalDataRequestedItem);
    return this;
  }

   /**
   * Object that allows Mastercard Checkout Solutions (MCS) Integrators to request the actual token in the enroll response.
   * @return additionalDataRequested
  **/
  @jakarta.annotation.Nullable
  public List<AdditionalDataRequested> getAdditionalDataRequested() {
    return additionalDataRequested;
  }

  public void setAdditionalDataRequested(List<AdditionalDataRequested> additionalDataRequested) {
    this.additionalDataRequested = additionalDataRequested;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SrcTokenRequestData instance itself
   */
  public SrcTokenRequestData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SrcTokenRequestData srcTokenRequestData = (SrcTokenRequestData) o;
    return Objects.equals(this.decisioningData, srcTokenRequestData.decisioningData) &&
        Objects.equals(this.additionalDataRequested, srcTokenRequestData.additionalDataRequested)&&
        Objects.equals(this.additionalProperties, srcTokenRequestData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decisioningData, additionalDataRequested, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SrcTokenRequestData {\n");
    sb.append("    decisioningData: ").append(toIndentedString(decisioningData)).append("\n");
    sb.append("    additionalDataRequested: ").append(toIndentedString(additionalDataRequested)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("decisioningData");
    openapiFields.add("additionalDataRequested");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SrcTokenRequestData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SrcTokenRequestData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SrcTokenRequestData is not found in the empty JSON string", SrcTokenRequestData.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `decisioningData`
      if (jsonObj.get("decisioningData") != null && !jsonObj.get("decisioningData").isJsonNull()) {
        DecisioningData.validateJsonElement(jsonObj.get("decisioningData"));
      }
      if (jsonObj.get("additionalDataRequested") != null && !jsonObj.get("additionalDataRequested").isJsonNull()) {
        JsonArray jsonArrayadditionalDataRequested = jsonObj.getAsJsonArray("additionalDataRequested");
        if (jsonArrayadditionalDataRequested != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalDataRequested").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalDataRequested` to be an array in the JSON string but got `%s`", jsonObj.get("additionalDataRequested").toString()));
          }

          // validate the optional field `additionalDataRequested` (array)
          for (int i = 0; i < jsonArrayadditionalDataRequested.size(); i++) {
            AdditionalDataRequested.validateJsonElement(jsonArrayadditionalDataRequested.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SrcTokenRequestData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SrcTokenRequestData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SrcTokenRequestData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SrcTokenRequestData.class));

       return (TypeAdapter<T>) new TypeAdapter<SrcTokenRequestData>() {
           @Override
           public void write(JsonWriter out, SrcTokenRequestData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SrcTokenRequestData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             SrcTokenRequestData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SrcTokenRequestData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SrcTokenRequestData
  * @throws IOException if the JSON string is invalid with respect to SrcTokenRequestData
  */
  public static SrcTokenRequestData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SrcTokenRequestData.class);
  }

 /**
  * Convert an instance of SrcTokenRequestData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

