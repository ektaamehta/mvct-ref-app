/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.card.invoker.JSON;

/**
 * Object for digitization decisioning data, including account score, device score, and digitization decision recommendation.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:04.218510319Z[Etc/UTC]")
public class DecisioningData {
  public static final String SERIALIZED_NAME_RECOMMENDATION = "recommendation";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION)
  private String recommendation;

  public static final String SERIALIZED_NAME_RECOMMENDATION_ALGORITHM_VERSION = "recommendationAlgorithmVersion";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_ALGORITHM_VERSION)
  private String recommendationAlgorithmVersion;

  public static final String SERIALIZED_NAME_DEVICE_SCORE = "deviceScore";
  @SerializedName(SERIALIZED_NAME_DEVICE_SCORE)
  private String deviceScore;

  public static final String SERIALIZED_NAME_ACCOUNT_SCORE = "accountScore";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SCORE)
  private String accountScore;

  public static final String SERIALIZED_NAME_RECOMMENDATION_REASONS = "recommendationReasons";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_REASONS)
  private List<String> recommendationReasons;

  public static final String SERIALIZED_NAME_DEVICE_CURRENT_LOCATION = "deviceCurrentLocation";
  @SerializedName(SERIALIZED_NAME_DEVICE_CURRENT_LOCATION)
  private String deviceCurrentLocation;

  public static final String SERIALIZED_NAME_DEVICE_IP_ADDRESS = "deviceIpAddress";
  @SerializedName(SERIALIZED_NAME_DEVICE_IP_ADDRESS)
  private String deviceIpAddress;

  public static final String SERIALIZED_NAME_MOBILE_NUMBER_SUFFIX = "mobileNumberSuffix";
  @SerializedName(SERIALIZED_NAME_MOBILE_NUMBER_SUFFIX)
  private String mobileNumberSuffix;

  public static final String SERIALIZED_NAME_ACCOUNT_ID_HASH = "accountIdHash";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID_HASH)
  private String accountIdHash;

  public DecisioningData() {
  }

  public DecisioningData recommendation(String recommendation) {
    this.recommendation = recommendation;
    return this;
  }

   /**
   * Digitization decision recommended by the Integrator. The Integrator will use the algorithm indicated in the recommendationAlgorithmVersion parameter to determine their recommendation. Must be either:  APPROVED (Recommend a decision of Approved), or DECLINED (Recommend a decision of Declined). 
   * @return recommendation
  **/
  @jakarta.annotation.Nullable
  public String getRecommendation() {
    return recommendation;
  }

  public void setRecommendation(String recommendation) {
    this.recommendation = recommendation;
  }


  public DecisioningData recommendationAlgorithmVersion(String recommendationAlgorithmVersion) {
    this.recommendationAlgorithmVersion = recommendationAlgorithmVersion;
    return this;
  }

   /**
   * Version of the algorithm used by the Integrator to determine its digitization decision recommendation; must be a value of 01. Other values may be supported in the future.
   * @return recommendationAlgorithmVersion
  **/
  @jakarta.annotation.Nullable
  public String getRecommendationAlgorithmVersion() {
    return recommendationAlgorithmVersion;
  }

  public void setRecommendationAlgorithmVersion(String recommendationAlgorithmVersion) {
    this.recommendationAlgorithmVersion = recommendationAlgorithmVersion;
  }


  public DecisioningData deviceScore(String deviceScore) {
    this.deviceScore = deviceScore;
    return this;
  }

   /**
   * Trust / Risk score assigned by the Integrator for the consumer device. Must be a value between 1 and 5, with 1 being low trust and 5 being highly trusted.
   * @return deviceScore
  **/
  @jakarta.annotation.Nullable
  public String getDeviceScore() {
    return deviceScore;
  }

  public void setDeviceScore(String deviceScore) {
    this.deviceScore = deviceScore;
  }


  public DecisioningData accountScore(String accountScore) {
    this.accountScore = accountScore;
    return this;
  }

   /**
   * Trust / risk score assigned by the Integrator for the consumer account or relationship. Must be a value between 1 and 5, with 1 being low trust and 5 being highly trusted.
   * @return accountScore
  **/
  @jakarta.annotation.Nullable
  public String getAccountScore() {
    return accountScore;
  }

  public void setAccountScore(String accountScore) {
    this.accountScore = accountScore;
  }


  public DecisioningData recommendationReasons(List<String> recommendationReasons) {
    this.recommendationReasons = recommendationReasons;
    return this;
  }

  public DecisioningData addRecommendationReasonsItem(String recommendationReasonsItem) {
    if (this.recommendationReasons == null) {
      this.recommendationReasons = new ArrayList<>();
    }
    this.recommendationReasons.add(recommendationReasonsItem);
    return this;
  }

   /**
   * Code indicating the reason why the Integrator is recommending their digitization decision. See table here - https://developer.mastercard.com/mdes-digital-enablement/documentation/code-and-formats/#recommendation-reason-codes
   * @return recommendationReasons
  **/
  @jakarta.annotation.Nullable
  public List<String> getRecommendationReasons() {
    return recommendationReasons;
  }

  public void setRecommendationReasons(List<String> recommendationReasons) {
    this.recommendationReasons = recommendationReasons;
  }


  public DecisioningData deviceCurrentLocation(String deviceCurrentLocation) {
    this.deviceCurrentLocation = deviceCurrentLocation;
    return this;
  }

   /**
   * Latitude and longitude in the format \&quot;(sign) latitude, (sign) longitude\&quot; with a precision of 2 decimal places. Ex - \&quot;38.63, -90.25\&quot; Latitude is between -90 and 90. Longitude between -180 and 180. Relates to the target device being provisioned. If there is no target device, then this should be the current consumer location, if available. 
   * @return deviceCurrentLocation
  **/
  @jakarta.annotation.Nullable
  public String getDeviceCurrentLocation() {
    return deviceCurrentLocation;
  }

  public void setDeviceCurrentLocation(String deviceCurrentLocation) {
    this.deviceCurrentLocation = deviceCurrentLocation;
  }


  public DecisioningData deviceIpAddress(String deviceIpAddress) {
    this.deviceIpAddress = deviceIpAddress;
    return this;
  }

   /**
   * The IP address of the device through which the device reaches the internet. This may be a temporary or permanent IP address assigned to a home router, or the IP address of a gateway through which the device connects to a network. IPv4 address format of 4 octets separated by \&quot;.\&quot; Ex - 127.0.0.1 Relates to the target device being provisioned. If there is no target device, then this should be the current consumer IP address, if available.
   * @return deviceIpAddress
  **/
  @jakarta.annotation.Nullable
  public String getDeviceIpAddress() {
    return deviceIpAddress;
  }

  public void setDeviceIpAddress(String deviceIpAddress) {
    this.deviceIpAddress = deviceIpAddress;
  }


  public DecisioningData mobileNumberSuffix(String mobileNumberSuffix) {
    this.mobileNumberSuffix = mobileNumberSuffix;
    return this;
  }

   /**
   * The last few digits (typically four) of the consumer&#39;s mobile phone number as available on file or on the consumer&#39;s current device, which may or may not be the mobile number of the target device being provisioned.
   * @return mobileNumberSuffix
  **/
  @jakarta.annotation.Nullable
  public String getMobileNumberSuffix() {
    return mobileNumberSuffix;
  }

  public void setMobileNumberSuffix(String mobileNumberSuffix) {
    this.mobileNumberSuffix = mobileNumberSuffix;
  }


  public DecisioningData accountIdHash(String accountIdHash) {
    this.accountIdHash = accountIdHash;
    return this;
  }

   /**
   * SHA-256 hash of the Cardholder&#39;s account ID with the Integrator (typically an email address). Max length is 64 alpha-numeric and hex-encoded data (case-insensitive).
   * @return accountIdHash
  **/
  @jakarta.annotation.Nullable
  public String getAccountIdHash() {
    return accountIdHash;
  }

  public void setAccountIdHash(String accountIdHash) {
    this.accountIdHash = accountIdHash;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DecisioningData instance itself
   */
  public DecisioningData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DecisioningData decisioningData = (DecisioningData) o;
    return Objects.equals(this.recommendation, decisioningData.recommendation) &&
        Objects.equals(this.recommendationAlgorithmVersion, decisioningData.recommendationAlgorithmVersion) &&
        Objects.equals(this.deviceScore, decisioningData.deviceScore) &&
        Objects.equals(this.accountScore, decisioningData.accountScore) &&
        Objects.equals(this.recommendationReasons, decisioningData.recommendationReasons) &&
        Objects.equals(this.deviceCurrentLocation, decisioningData.deviceCurrentLocation) &&
        Objects.equals(this.deviceIpAddress, decisioningData.deviceIpAddress) &&
        Objects.equals(this.mobileNumberSuffix, decisioningData.mobileNumberSuffix) &&
        Objects.equals(this.accountIdHash, decisioningData.accountIdHash)&&
        Objects.equals(this.additionalProperties, decisioningData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recommendation, recommendationAlgorithmVersion, deviceScore, accountScore, recommendationReasons, deviceCurrentLocation, deviceIpAddress, mobileNumberSuffix, accountIdHash, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DecisioningData {\n");
    sb.append("    recommendation: ").append(toIndentedString(recommendation)).append("\n");
    sb.append("    recommendationAlgorithmVersion: ").append(toIndentedString(recommendationAlgorithmVersion)).append("\n");
    sb.append("    deviceScore: ").append(toIndentedString(deviceScore)).append("\n");
    sb.append("    accountScore: ").append(toIndentedString(accountScore)).append("\n");
    sb.append("    recommendationReasons: ").append(toIndentedString(recommendationReasons)).append("\n");
    sb.append("    deviceCurrentLocation: ").append(toIndentedString(deviceCurrentLocation)).append("\n");
    sb.append("    deviceIpAddress: ").append(toIndentedString(deviceIpAddress)).append("\n");
    sb.append("    mobileNumberSuffix: ").append(toIndentedString(mobileNumberSuffix)).append("\n");
    sb.append("    accountIdHash: ").append(toIndentedString(accountIdHash)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recommendation");
    openapiFields.add("recommendationAlgorithmVersion");
    openapiFields.add("deviceScore");
    openapiFields.add("accountScore");
    openapiFields.add("recommendationReasons");
    openapiFields.add("deviceCurrentLocation");
    openapiFields.add("deviceIpAddress");
    openapiFields.add("mobileNumberSuffix");
    openapiFields.add("accountIdHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DecisioningData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DecisioningData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DecisioningData is not found in the empty JSON string", DecisioningData.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("recommendation") != null && !jsonObj.get("recommendation").isJsonNull()) && !jsonObj.get("recommendation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendation").toString()));
      }
      if ((jsonObj.get("recommendationAlgorithmVersion") != null && !jsonObj.get("recommendationAlgorithmVersion").isJsonNull()) && !jsonObj.get("recommendationAlgorithmVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendationAlgorithmVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendationAlgorithmVersion").toString()));
      }
      if ((jsonObj.get("deviceScore") != null && !jsonObj.get("deviceScore").isJsonNull()) && !jsonObj.get("deviceScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceScore").toString()));
      }
      if ((jsonObj.get("accountScore") != null && !jsonObj.get("accountScore").isJsonNull()) && !jsonObj.get("accountScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountScore").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recommendationReasons") != null && !jsonObj.get("recommendationReasons").isJsonNull() && !jsonObj.get("recommendationReasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendationReasons` to be an array in the JSON string but got `%s`", jsonObj.get("recommendationReasons").toString()));
      }
      if ((jsonObj.get("deviceCurrentLocation") != null && !jsonObj.get("deviceCurrentLocation").isJsonNull()) && !jsonObj.get("deviceCurrentLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceCurrentLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceCurrentLocation").toString()));
      }
      if ((jsonObj.get("deviceIpAddress") != null && !jsonObj.get("deviceIpAddress").isJsonNull()) && !jsonObj.get("deviceIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceIpAddress").toString()));
      }
      if ((jsonObj.get("mobileNumberSuffix") != null && !jsonObj.get("mobileNumberSuffix").isJsonNull()) && !jsonObj.get("mobileNumberSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileNumberSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileNumberSuffix").toString()));
      }
      if ((jsonObj.get("accountIdHash") != null && !jsonObj.get("accountIdHash").isJsonNull()) && !jsonObj.get("accountIdHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountIdHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountIdHash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DecisioningData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DecisioningData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DecisioningData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DecisioningData.class));

       return (TypeAdapter<T>) new TypeAdapter<DecisioningData>() {
           @Override
           public void write(JsonWriter out, DecisioningData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DecisioningData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             DecisioningData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DecisioningData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DecisioningData
  * @throws IOException if the JSON string is invalid with respect to DecisioningData
  */
  public static DecisioningData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DecisioningData.class);
  }

 /**
  * Convert an instance of DecisioningData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

