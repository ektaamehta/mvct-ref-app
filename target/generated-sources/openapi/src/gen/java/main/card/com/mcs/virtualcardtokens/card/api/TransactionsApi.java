/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.api;

import com.mcs.virtualcardtokens.card.invoker.ApiCallback;
import com.mcs.virtualcardtokens.card.invoker.ApiClient;
import com.mcs.virtualcardtokens.card.invoker.ApiException;
import com.mcs.virtualcardtokens.card.invoker.ApiResponse;
import com.mcs.virtualcardtokens.card.invoker.Configuration;
import com.mcs.virtualcardtokens.card.invoker.Pair;
import com.mcs.virtualcardtokens.card.invoker.ProgressRequestBody;
import com.mcs.virtualcardtokens.card.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mcs.virtualcardtokens.card.model.Error;
import com.mcs.virtualcardtokens.card.model.GetRecentTransactionsResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getTransactionHistory
     * @param cardId Unique identifier of the card. The card identifier may be an SRC Digital Card Identifier or an SRC Payment Card Identifier (required)
     * @param srcClientId A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS). (required)
     * @param serviceId A unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded. (required)
     * @param srciTransactionId Transaction reference generated by the checkout initiator (optional)
     * @param transactionsFromTimestamp Optional Parameter to provide Transaction history records originating after Date-Time represented by this parameter. This parameter MUST not past 30 days from current date-time and also not after current date-time. Supports taking value in UTC epoch milliseconds format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid tokenRequested field.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found by cards service.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable. Typically the server not able to serve the request temporarily.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionHistoryCall(String cardId, UUID srcClientId, String serviceId, String srciTransactionId, String transactionsFromTimestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{cardId}/transactions"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (srcClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("srcClientId", srcClientId));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceId", serviceId));
        }

        if (srciTransactionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("srciTransactionId", srciTransactionId));
        }

        if (transactionsFromTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionsFromTimestamp", transactionsFromTimestamp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionHistoryValidateBeforeCall(String cardId, UUID srcClientId, String serviceId, String srciTransactionId, String transactionsFromTimestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getTransactionHistory(Async)");
        }

        // verify the required parameter 'srcClientId' is set
        if (srcClientId == null) {
            throw new ApiException("Missing the required parameter 'srcClientId' when calling getTransactionHistory(Async)");
        }

        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getTransactionHistory(Async)");
        }

        return getTransactionHistoryCall(cardId, srcClientId, serviceId, srciTransactionId, transactionsFromTimestamp, _callback);

    }

    /**
     * RETRIEVE TRANSACTIONS
     * Get transactions by Card Id API will retrieve the recent transactions for the specified card identifier. Integrators may retrieve recent transactions details for a specified card identifier via the Get Transaction Details request. If the Issuer of the card does not support Transaction Detail Service, the Get Transaction Details request will return an error.
     * @param cardId Unique identifier of the card. The card identifier may be an SRC Digital Card Identifier or an SRC Payment Card Identifier (required)
     * @param srcClientId A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS). (required)
     * @param serviceId A unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded. (required)
     * @param srciTransactionId Transaction reference generated by the checkout initiator (optional)
     * @param transactionsFromTimestamp Optional Parameter to provide Transaction history records originating after Date-Time represented by this parameter. This parameter MUST not past 30 days from current date-time and also not after current date-time. Supports taking value in UTC epoch milliseconds format. (optional)
     * @return GetRecentTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid tokenRequested field.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found by cards service.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable. Typically the server not able to serve the request temporarily.  </td><td>  -  </td></tr>
     </table>
     */
    public GetRecentTransactionsResponse getTransactionHistory(String cardId, UUID srcClientId, String serviceId, String srciTransactionId, String transactionsFromTimestamp) throws ApiException {
        ApiResponse<GetRecentTransactionsResponse> localVarResp = getTransactionHistoryWithHttpInfo(cardId, srcClientId, serviceId, srciTransactionId, transactionsFromTimestamp);
        return localVarResp.getData();
    }

    /**
     * RETRIEVE TRANSACTIONS
     * Get transactions by Card Id API will retrieve the recent transactions for the specified card identifier. Integrators may retrieve recent transactions details for a specified card identifier via the Get Transaction Details request. If the Issuer of the card does not support Transaction Detail Service, the Get Transaction Details request will return an error.
     * @param cardId Unique identifier of the card. The card identifier may be an SRC Digital Card Identifier or an SRC Payment Card Identifier (required)
     * @param srcClientId A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS). (required)
     * @param serviceId A unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded. (required)
     * @param srciTransactionId Transaction reference generated by the checkout initiator (optional)
     * @param transactionsFromTimestamp Optional Parameter to provide Transaction history records originating after Date-Time represented by this parameter. This parameter MUST not past 30 days from current date-time and also not after current date-time. Supports taking value in UTC epoch milliseconds format. (optional)
     * @return ApiResponse&lt;GetRecentTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid tokenRequested field.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found by cards service.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable. Typically the server not able to serve the request temporarily.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRecentTransactionsResponse> getTransactionHistoryWithHttpInfo(String cardId, UUID srcClientId, String serviceId, String srciTransactionId, String transactionsFromTimestamp) throws ApiException {
        okhttp3.Call localVarCall = getTransactionHistoryValidateBeforeCall(cardId, srcClientId, serviceId, srciTransactionId, transactionsFromTimestamp, null);
        Type localVarReturnType = new TypeToken<GetRecentTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RETRIEVE TRANSACTIONS (asynchronously)
     * Get transactions by Card Id API will retrieve the recent transactions for the specified card identifier. Integrators may retrieve recent transactions details for a specified card identifier via the Get Transaction Details request. If the Issuer of the card does not support Transaction Detail Service, the Get Transaction Details request will return an error.
     * @param cardId Unique identifier of the card. The card identifier may be an SRC Digital Card Identifier or an SRC Payment Card Identifier (required)
     * @param srcClientId A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS). (required)
     * @param serviceId A unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded. (required)
     * @param srciTransactionId Transaction reference generated by the checkout initiator (optional)
     * @param transactionsFromTimestamp Optional Parameter to provide Transaction history records originating after Date-Time represented by this parameter. This parameter MUST not past 30 days from current date-time and also not after current date-time. Supports taking value in UTC epoch milliseconds format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid tokenRequested field.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Card not found by cards service.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable. Typically the server not able to serve the request temporarily.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionHistoryAsync(String cardId, UUID srcClientId, String serviceId, String srciTransactionId, String transactionsFromTimestamp, final ApiCallback<GetRecentTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionHistoryValidateBeforeCall(cardId, srcClientId, serviceId, srciTransactionId, transactionsFromTimestamp, _callback);
        Type localVarReturnType = new TypeToken<GetRecentTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
