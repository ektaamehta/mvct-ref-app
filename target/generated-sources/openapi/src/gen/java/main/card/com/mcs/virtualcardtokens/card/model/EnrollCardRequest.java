/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.card.model.AssuranceData;
import com.mcs.virtualcardtokens.card.model.Consumer;
import com.mcs.virtualcardtokens.card.model.EnrolmentReferenceData;
import com.mcs.virtualcardtokens.card.model.Origin;
import com.mcs.virtualcardtokens.card.model.SrcTokenRequestData;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.card.invoker.JSON;

/**
 * The EnrollCardRequest is used to create unique tokens for Mastercard Checkout Solutions (MCS) Integrators.    The EnrollCardRequest must contain the following values:    * &#x60;serviceId&#x60;   * &#x60;srcClientId&#x60;   * &#x60;cardSource&#x60;   * &#x60;consumerEnrollCardRequest&#x60;   * &#x60;encryptedCard JWE[Card] or enrolmentReferenceData&#x60;   * &#x60;srcDpaId is conditional&#x60;  Please note that the current example shows all objects.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:04.218510319Z[Etc/UTC]")
public class EnrollCardRequest {
  public static final String SERIALIZED_NAME_SRC_CLIENT_ID = "srcClientId";
  @SerializedName(SERIALIZED_NAME_SRC_CLIENT_ID)
  private UUID srcClientId;

  public static final String SERIALIZED_NAME_SRC_DPA_ID = "srcDpaId";
  @SerializedName(SERIALIZED_NAME_SRC_DPA_ID)
  private String srcDpaId;

  public static final String SERIALIZED_NAME_SRC_CORRELATION_ID = "srcCorrelationId";
  @SerializedName(SERIALIZED_NAME_SRC_CORRELATION_ID)
  private String srcCorrelationId;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_KEY_FINGERPRINT_ID = "keyFingerprintId";
  @SerializedName(SERIALIZED_NAME_KEY_FINGERPRINT_ID)
  private String keyFingerprintId;

  public static final String SERIALIZED_NAME_ENCRYPTED_CARD = "encryptedCard";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_CARD)
  private String encryptedCard;

  public static final String SERIALIZED_NAME_CONSUMER = "consumer";
  @SerializedName(SERIALIZED_NAME_CONSUMER)
  private Consumer consumer;

  public static final String SERIALIZED_NAME_SRC_TOKEN_REQUEST_DATA = "srcTokenRequestData";
  @SerializedName(SERIALIZED_NAME_SRC_TOKEN_REQUEST_DATA)
  private SrcTokenRequestData srcTokenRequestData;

  public static final String SERIALIZED_NAME_CARD_SOURCE = "cardSource";
  @SerializedName(SERIALIZED_NAME_CARD_SOURCE)
  private Origin cardSource = Origin.CARDHOLDER;

  public static final String SERIALIZED_NAME_ENROLMENT_REFERENCE_DATA = "enrolmentReferenceData";
  @SerializedName(SERIALIZED_NAME_ENROLMENT_REFERENCE_DATA)
  private EnrolmentReferenceData enrolmentReferenceData;

  public static final String SERIALIZED_NAME_ASSURANCE_DATA = "assuranceData";
  @SerializedName(SERIALIZED_NAME_ASSURANCE_DATA)
  private AssuranceData assuranceData;

  public EnrollCardRequest() {
  }

  public EnrollCardRequest srcClientId(UUID srcClientId) {
    this.srcClientId = srcClientId;
    return this;
  }

   /**
   * A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS).
   * @return srcClientId
  **/
  @jakarta.annotation.Nonnull
  public UUID getSrcClientId() {
    return srcClientId;
  }

  public void setSrcClientId(UUID srcClientId) {
    this.srcClientId = srcClientId;
  }


  public EnrollCardRequest srcDpaId(String srcDpaId) {
    this.srcDpaId = srcDpaId;
    return this;
  }

   /**
   * The registered identifier for the Digital Payment Application (DPA) accessing the service.  __Conditional__: Required if you are a Merchant directly integrating with Mastercard Checkout Solutions (MCS) APIs, a Payment Service Provider (PSP) integrating On-Behalf-Of (OBO) a Merchant, a Payment Facilitator, or if you are enrolling in the Secure Card on File (SCOF) QR program. 
   * @return srcDpaId
  **/
  @jakarta.annotation.Nullable
  public String getSrcDpaId() {
    return srcDpaId;
  }

  public void setSrcDpaId(String srcDpaId) {
    this.srcDpaId = srcDpaId;
  }


  public EnrollCardRequest srcCorrelationId(String srcCorrelationId) {
    this.srcCorrelationId = srcCorrelationId;
    return this;
  }

   /**
   * A unique identifier that correlates a series of two or more requests to a single session of activity. Mastercard Checkout Solutions (MCS) will return a new srcCorrelationId in each response by default, but Integrators may choose to populate previously used srcCorrelationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated srcCorrelationId in the request, or by generating your own ID in the same format. SrcCorrelationId is used for tracking and troubleshooting purposes within Mastercard&#39;s ecosystem.
   * @return srcCorrelationId
  **/
  @jakarta.annotation.Nullable
  public String getSrcCorrelationId() {
    return srcCorrelationId;
  }

  public void setSrcCorrelationId(String srcCorrelationId) {
    this.srcCorrelationId = srcCorrelationId;
  }


  public EnrollCardRequest serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

   /**
   * A unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded.
   * @return serviceId
  **/
  @jakarta.annotation.Nonnull
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public EnrollCardRequest keyFingerprintId(String keyFingerprintId) {
    this.keyFingerprintId = keyFingerprintId;
    return this;
  }

   /**
   * Mastercard will use the encryption key associated with the supplied KID to encrypt the payload. If not supplied, the key which is marked as default will be used.
   * @return keyFingerprintId
  **/
  @jakarta.annotation.Nullable
  public String getKeyFingerprintId() {
    return keyFingerprintId;
  }

  public void setKeyFingerprintId(String keyFingerprintId) {
    this.keyFingerprintId = keyFingerprintId;
  }


  public EnrollCardRequest encryptedCard(String encryptedCard) {
    this.encryptedCard = encryptedCard;
    return this;
  }

   /**
   * __Conditional__: encryptedCard must be passed for FPAN based enrollment. This object is of type JWE[Card] and must be encrypted using the steps in this tutorial- https://developer.mastercard.com/mastercard-checkout-solutions/tutorial/perform-encryption/.   Please see enrolmentReferenceData for alternative forms of enrollment. 
   * @return encryptedCard
  **/
  @jakarta.annotation.Nullable
  public String getEncryptedCard() {
    return encryptedCard;
  }

  public void setEncryptedCard(String encryptedCard) {
    this.encryptedCard = encryptedCard;
  }


  public EnrollCardRequest consumer(Consumer consumer) {
    this.consumer = consumer;
    return this;
  }

   /**
   * Get consumer
   * @return consumer
  **/
  @jakarta.annotation.Nonnull
  public Consumer getConsumer() {
    return consumer;
  }

  public void setConsumer(Consumer consumer) {
    this.consumer = consumer;
  }


  public EnrollCardRequest srcTokenRequestData(SrcTokenRequestData srcTokenRequestData) {
    this.srcTokenRequestData = srcTokenRequestData;
    return this;
  }

   /**
   * Get srcTokenRequestData
   * @return srcTokenRequestData
  **/
  @jakarta.annotation.Nullable
  public SrcTokenRequestData getSrcTokenRequestData() {
    return srcTokenRequestData;
  }

  public void setSrcTokenRequestData(SrcTokenRequestData srcTokenRequestData) {
    this.srcTokenRequestData = srcTokenRequestData;
  }


  public EnrollCardRequest cardSource(Origin cardSource) {
    this.cardSource = cardSource;
    return this;
  }

   /**
   * Get cardSource
   * @return cardSource
  **/
  @jakarta.annotation.Nonnull
  public Origin getCardSource() {
    return cardSource;
  }

  public void setCardSource(Origin cardSource) {
    this.cardSource = cardSource;
  }


  public EnrollCardRequest enrolmentReferenceData(EnrolmentReferenceData enrolmentReferenceData) {
    this.enrolmentReferenceData = enrolmentReferenceData;
    return this;
  }

   /**
   * Get enrolmentReferenceData
   * @return enrolmentReferenceData
  **/
  @jakarta.annotation.Nullable
  public EnrolmentReferenceData getEnrolmentReferenceData() {
    return enrolmentReferenceData;
  }

  public void setEnrolmentReferenceData(EnrolmentReferenceData enrolmentReferenceData) {
    this.enrolmentReferenceData = enrolmentReferenceData;
  }


  public EnrollCardRequest assuranceData(AssuranceData assuranceData) {
    this.assuranceData = assuranceData;
    return this;
  }

   /**
   * Get assuranceData
   * @return assuranceData
  **/
  @jakarta.annotation.Nullable
  public AssuranceData getAssuranceData() {
    return assuranceData;
  }

  public void setAssuranceData(AssuranceData assuranceData) {
    this.assuranceData = assuranceData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EnrollCardRequest instance itself
   */
  public EnrollCardRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnrollCardRequest enrollCardRequest = (EnrollCardRequest) o;
    return Objects.equals(this.srcClientId, enrollCardRequest.srcClientId) &&
        Objects.equals(this.srcDpaId, enrollCardRequest.srcDpaId) &&
        Objects.equals(this.srcCorrelationId, enrollCardRequest.srcCorrelationId) &&
        Objects.equals(this.serviceId, enrollCardRequest.serviceId) &&
        Objects.equals(this.keyFingerprintId, enrollCardRequest.keyFingerprintId) &&
        Objects.equals(this.encryptedCard, enrollCardRequest.encryptedCard) &&
        Objects.equals(this.consumer, enrollCardRequest.consumer) &&
        Objects.equals(this.srcTokenRequestData, enrollCardRequest.srcTokenRequestData) &&
        Objects.equals(this.cardSource, enrollCardRequest.cardSource) &&
        Objects.equals(this.enrolmentReferenceData, enrollCardRequest.enrolmentReferenceData) &&
        Objects.equals(this.assuranceData, enrollCardRequest.assuranceData)&&
        Objects.equals(this.additionalProperties, enrollCardRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcClientId, srcDpaId, srcCorrelationId, serviceId, keyFingerprintId, encryptedCard, consumer, srcTokenRequestData, cardSource, enrolmentReferenceData, assuranceData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnrollCardRequest {\n");
    sb.append("    srcClientId: ").append(toIndentedString(srcClientId)).append("\n");
    sb.append("    srcDpaId: ").append(toIndentedString(srcDpaId)).append("\n");
    sb.append("    srcCorrelationId: ").append(toIndentedString(srcCorrelationId)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    keyFingerprintId: ").append(toIndentedString(keyFingerprintId)).append("\n");
    sb.append("    encryptedCard: ").append(toIndentedString(encryptedCard)).append("\n");
    sb.append("    consumer: ").append(toIndentedString(consumer)).append("\n");
    sb.append("    srcTokenRequestData: ").append(toIndentedString(srcTokenRequestData)).append("\n");
    sb.append("    cardSource: ").append(toIndentedString(cardSource)).append("\n");
    sb.append("    enrolmentReferenceData: ").append(toIndentedString(enrolmentReferenceData)).append("\n");
    sb.append("    assuranceData: ").append(toIndentedString(assuranceData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("srcClientId");
    openapiFields.add("srcDpaId");
    openapiFields.add("srcCorrelationId");
    openapiFields.add("serviceId");
    openapiFields.add("keyFingerprintId");
    openapiFields.add("encryptedCard");
    openapiFields.add("consumer");
    openapiFields.add("srcTokenRequestData");
    openapiFields.add("cardSource");
    openapiFields.add("enrolmentReferenceData");
    openapiFields.add("assuranceData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("srcClientId");
    openapiRequiredFields.add("serviceId");
    openapiRequiredFields.add("consumer");
    openapiRequiredFields.add("cardSource");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EnrollCardRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnrollCardRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnrollCardRequest is not found in the empty JSON string", EnrollCardRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnrollCardRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("srcClientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcClientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcClientId").toString()));
      }
      if ((jsonObj.get("srcDpaId") != null && !jsonObj.get("srcDpaId").isJsonNull()) && !jsonObj.get("srcDpaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcDpaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcDpaId").toString()));
      }
      if ((jsonObj.get("srcCorrelationId") != null && !jsonObj.get("srcCorrelationId").isJsonNull()) && !jsonObj.get("srcCorrelationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcCorrelationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcCorrelationId").toString()));
      }
      if (!jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("keyFingerprintId") != null && !jsonObj.get("keyFingerprintId").isJsonNull()) && !jsonObj.get("keyFingerprintId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyFingerprintId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyFingerprintId").toString()));
      }
      if ((jsonObj.get("encryptedCard") != null && !jsonObj.get("encryptedCard").isJsonNull()) && !jsonObj.get("encryptedCard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptedCard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptedCard").toString()));
      }
      // validate the required field `consumer`
      Consumer.validateJsonElement(jsonObj.get("consumer"));
      // validate the optional field `srcTokenRequestData`
      if (jsonObj.get("srcTokenRequestData") != null && !jsonObj.get("srcTokenRequestData").isJsonNull()) {
        SrcTokenRequestData.validateJsonElement(jsonObj.get("srcTokenRequestData"));
      }
      // validate the required field `cardSource`
      Origin.validateJsonElement(jsonObj.get("cardSource"));
      // validate the optional field `enrolmentReferenceData`
      if (jsonObj.get("enrolmentReferenceData") != null && !jsonObj.get("enrolmentReferenceData").isJsonNull()) {
        EnrolmentReferenceData.validateJsonElement(jsonObj.get("enrolmentReferenceData"));
      }
      // validate the optional field `assuranceData`
      if (jsonObj.get("assuranceData") != null && !jsonObj.get("assuranceData").isJsonNull()) {
        AssuranceData.validateJsonElement(jsonObj.get("assuranceData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnrollCardRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnrollCardRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnrollCardRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnrollCardRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EnrollCardRequest>() {
           @Override
           public void write(JsonWriter out, EnrollCardRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EnrollCardRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             EnrollCardRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EnrollCardRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EnrollCardRequest
  * @throws IOException if the JSON string is invalid with respect to EnrollCardRequest
  */
  public static EnrollCardRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnrollCardRequest.class);
  }

 /**
  * Convert an instance of EnrollCardRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

