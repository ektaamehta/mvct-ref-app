/*
 * Mastercard Virtual Card Token Checkout API
 * Checkout end point used by Mastercard Virtual Card Token Integrators to receive payload data from the Mastercard Checkout Solutions and send the results of transaction authorization back to the Mastercard. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.checkout.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.checkout.model.ComplianceSettings;
import com.mcs.virtualcardtokens.checkout.model.ConsumerStatus;
import com.mcs.virtualcardtokens.checkout.model.MaskedConsumerIdentity;
import com.mcs.virtualcardtokens.checkout.model.PhoneNumber;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.checkout.invoker.JSON;

/**
 * Object for information related to an enrolled consumer into Mastercard Checkout Solutions - details include consumer status, identity and consumer enrollment data.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:06.789601445Z[Etc/UTC]")
public class MaskedConsumer {
  public static final String SERIALIZED_NAME_SRC_CONSUMER_ID = "srcConsumerId";
  @SerializedName(SERIALIZED_NAME_SRC_CONSUMER_ID)
  private String srcConsumerId;

  public static final String SERIALIZED_NAME_MASKED_CONSUMER_IDENTITY = "maskedConsumerIdentity";
  @SerializedName(SERIALIZED_NAME_MASKED_CONSUMER_IDENTITY)
  private MaskedConsumerIdentity maskedConsumerIdentity;

  public static final String SERIALIZED_NAME_MASKED_EMAIL_ADDRESS = "maskedEmailAddress";
  @SerializedName(SERIALIZED_NAME_MASKED_EMAIL_ADDRESS)
  private String maskedEmailAddress;

  public static final String SERIALIZED_NAME_MASKED_MOBILE_NUMBER = "maskedMobileNumber";
  @SerializedName(SERIALIZED_NAME_MASKED_MOBILE_NUMBER)
  private PhoneNumber maskedMobileNumber;

  public static final String SERIALIZED_NAME_MASKED_NATIONAL_IDENTIFIER = "maskedNationalIdentifier";
  @SerializedName(SERIALIZED_NAME_MASKED_NATIONAL_IDENTIFIER)
  private String maskedNationalIdentifier;

  public static final String SERIALIZED_NAME_COMPLIANCE_SETTINGS = "complianceSettings";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_SETTINGS)
  private ComplianceSettings complianceSettings;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ConsumerStatus status;

  public static final String SERIALIZED_NAME_MASKED_FIRST_NAME = "maskedFirstName";
  @SerializedName(SERIALIZED_NAME_MASKED_FIRST_NAME)
  private String maskedFirstName;

  public static final String SERIALIZED_NAME_MASKED_LAST_NAME = "maskedLastName";
  @SerializedName(SERIALIZED_NAME_MASKED_LAST_NAME)
  private String maskedLastName;

  public static final String SERIALIZED_NAME_MASKED_FULL_NAME = "maskedFullName";
  @SerializedName(SERIALIZED_NAME_MASKED_FULL_NAME)
  private String maskedFullName;

  public static final String SERIALIZED_NAME_DATE_CONSUMER_ADDED = "dateConsumerAdded";
  @SerializedName(SERIALIZED_NAME_DATE_CONSUMER_ADDED)
  private String dateConsumerAdded;

  public static final String SERIALIZED_NAME_DATE_CONSUMER_LAST_USED = "dateConsumerLastUsed";
  @SerializedName(SERIALIZED_NAME_DATE_CONSUMER_LAST_USED)
  private String dateConsumerLastUsed;

  public MaskedConsumer() {
  }

  public MaskedConsumer srcConsumerId(String srcConsumerId) {
    this.srcConsumerId = srcConsumerId;
    return this;
  }

   /**
   * SRC consumer reference identifier as generated by the Click to Pay System.
   * @return srcConsumerId
  **/
  @jakarta.annotation.Nullable
  public String getSrcConsumerId() {
    return srcConsumerId;
  }

  public void setSrcConsumerId(String srcConsumerId) {
    this.srcConsumerId = srcConsumerId;
  }


  public MaskedConsumer maskedConsumerIdentity(MaskedConsumerIdentity maskedConsumerIdentity) {
    this.maskedConsumerIdentity = maskedConsumerIdentity;
    return this;
  }

   /**
   * Get maskedConsumerIdentity
   * @return maskedConsumerIdentity
  **/
  @jakarta.annotation.Nonnull
  public MaskedConsumerIdentity getMaskedConsumerIdentity() {
    return maskedConsumerIdentity;
  }

  public void setMaskedConsumerIdentity(MaskedConsumerIdentity maskedConsumerIdentity) {
    this.maskedConsumerIdentity = maskedConsumerIdentity;
  }


  public MaskedConsumer maskedEmailAddress(String maskedEmailAddress) {
    this.maskedEmailAddress = maskedEmailAddress;
    return this;
  }

   /**
   * Masked Consumer email address.
   * @return maskedEmailAddress
  **/
  @jakarta.annotation.Nullable
  public String getMaskedEmailAddress() {
    return maskedEmailAddress;
  }

  public void setMaskedEmailAddress(String maskedEmailAddress) {
    this.maskedEmailAddress = maskedEmailAddress;
  }


  public MaskedConsumer maskedMobileNumber(PhoneNumber maskedMobileNumber) {
    this.maskedMobileNumber = maskedMobileNumber;
    return this;
  }

   /**
   * Get maskedMobileNumber
   * @return maskedMobileNumber
  **/
  @jakarta.annotation.Nullable
  public PhoneNumber getMaskedMobileNumber() {
    return maskedMobileNumber;
  }

  public void setMaskedMobileNumber(PhoneNumber maskedMobileNumber) {
    this.maskedMobileNumber = maskedMobileNumber;
  }


  public MaskedConsumer maskedNationalIdentifier(String maskedNationalIdentifier) {
    this.maskedNationalIdentifier = maskedNationalIdentifier;
    return this;
  }

   /**
   * Masked Geographic-specific, nationally-provided identifier for the Consumer.
   * @return maskedNationalIdentifier
  **/
  @jakarta.annotation.Nullable
  public String getMaskedNationalIdentifier() {
    return maskedNationalIdentifier;
  }

  public void setMaskedNationalIdentifier(String maskedNationalIdentifier) {
    this.maskedNationalIdentifier = maskedNationalIdentifier;
  }


  public MaskedConsumer complianceSettings(ComplianceSettings complianceSettings) {
    this.complianceSettings = complianceSettings;
    return this;
  }

   /**
   * Get complianceSettings
   * @return complianceSettings
  **/
  @jakarta.annotation.Nullable
  public ComplianceSettings getComplianceSettings() {
    return complianceSettings;
  }

  public void setComplianceSettings(ComplianceSettings complianceSettings) {
    this.complianceSettings = complianceSettings;
  }


  public MaskedConsumer countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Consumer-provided country code. ISO 3166 alpha 2 country code.
   * @return countryCode
  **/
  @jakarta.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public MaskedConsumer languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

   /**
   * Consumer-provided language choice. ISO 639-1 Code.
   * @return languageCode
  **/
  @jakarta.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public MaskedConsumer status(ConsumerStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nonnull
  public ConsumerStatus getStatus() {
    return status;
  }

  public void setStatus(ConsumerStatus status) {
    this.status = status;
  }


  public MaskedConsumer maskedFirstName(String maskedFirstName) {
    this.maskedFirstName = maskedFirstName;
    return this;
  }

   /**
   * Masked first name of the Consumer.
   * @return maskedFirstName
  **/
  @jakarta.annotation.Nullable
  public String getMaskedFirstName() {
    return maskedFirstName;
  }

  public void setMaskedFirstName(String maskedFirstName) {
    this.maskedFirstName = maskedFirstName;
  }


  public MaskedConsumer maskedLastName(String maskedLastName) {
    this.maskedLastName = maskedLastName;
    return this;
  }

   /**
   * Masked last name of the Consumer.
   * @return maskedLastName
  **/
  @jakarta.annotation.Nullable
  public String getMaskedLastName() {
    return maskedLastName;
  }

  public void setMaskedLastName(String maskedLastName) {
    this.maskedLastName = maskedLastName;
  }


  public MaskedConsumer maskedFullName(String maskedFullName) {
    this.maskedFullName = maskedFullName;
    return this;
  }

   /**
   * Masked full name of the Consumer.
   * @return maskedFullName
  **/
  @jakarta.annotation.Nullable
  public String getMaskedFullName() {
    return maskedFullName;
  }

  public void setMaskedFullName(String maskedFullName) {
    this.maskedFullName = maskedFullName;
  }


  public MaskedConsumer dateConsumerAdded(String dateConsumerAdded) {
    this.dateConsumerAdded = dateConsumerAdded;
    return this;
  }

   /**
   * Date (in UTC) Consumer was added to the Secure Card on File system.
   * @return dateConsumerAdded
  **/
  @jakarta.annotation.Nonnull
  public String getDateConsumerAdded() {
    return dateConsumerAdded;
  }

  public void setDateConsumerAdded(String dateConsumerAdded) {
    this.dateConsumerAdded = dateConsumerAdded;
  }


  public MaskedConsumer dateConsumerLastUsed(String dateConsumerLastUsed) {
    this.dateConsumerLastUsed = dateConsumerLastUsed;
    return this;
  }

   /**
   * Date (in UTC) Consumer last transacted in the Secure Card on File system.
   * @return dateConsumerLastUsed
  **/
  @jakarta.annotation.Nullable
  public String getDateConsumerLastUsed() {
    return dateConsumerLastUsed;
  }

  public void setDateConsumerLastUsed(String dateConsumerLastUsed) {
    this.dateConsumerLastUsed = dateConsumerLastUsed;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MaskedConsumer instance itself
   */
  public MaskedConsumer putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaskedConsumer maskedConsumer = (MaskedConsumer) o;
    return Objects.equals(this.srcConsumerId, maskedConsumer.srcConsumerId) &&
        Objects.equals(this.maskedConsumerIdentity, maskedConsumer.maskedConsumerIdentity) &&
        Objects.equals(this.maskedEmailAddress, maskedConsumer.maskedEmailAddress) &&
        Objects.equals(this.maskedMobileNumber, maskedConsumer.maskedMobileNumber) &&
        Objects.equals(this.maskedNationalIdentifier, maskedConsumer.maskedNationalIdentifier) &&
        Objects.equals(this.complianceSettings, maskedConsumer.complianceSettings) &&
        Objects.equals(this.countryCode, maskedConsumer.countryCode) &&
        Objects.equals(this.languageCode, maskedConsumer.languageCode) &&
        Objects.equals(this.status, maskedConsumer.status) &&
        Objects.equals(this.maskedFirstName, maskedConsumer.maskedFirstName) &&
        Objects.equals(this.maskedLastName, maskedConsumer.maskedLastName) &&
        Objects.equals(this.maskedFullName, maskedConsumer.maskedFullName) &&
        Objects.equals(this.dateConsumerAdded, maskedConsumer.dateConsumerAdded) &&
        Objects.equals(this.dateConsumerLastUsed, maskedConsumer.dateConsumerLastUsed)&&
        Objects.equals(this.additionalProperties, maskedConsumer.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcConsumerId, maskedConsumerIdentity, maskedEmailAddress, maskedMobileNumber, maskedNationalIdentifier, complianceSettings, countryCode, languageCode, status, maskedFirstName, maskedLastName, maskedFullName, dateConsumerAdded, dateConsumerLastUsed, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaskedConsumer {\n");
    sb.append("    srcConsumerId: ").append(toIndentedString(srcConsumerId)).append("\n");
    sb.append("    maskedConsumerIdentity: ").append(toIndentedString(maskedConsumerIdentity)).append("\n");
    sb.append("    maskedEmailAddress: ").append(toIndentedString(maskedEmailAddress)).append("\n");
    sb.append("    maskedMobileNumber: ").append(toIndentedString(maskedMobileNumber)).append("\n");
    sb.append("    maskedNationalIdentifier: ").append(toIndentedString(maskedNationalIdentifier)).append("\n");
    sb.append("    complianceSettings: ").append(toIndentedString(complianceSettings)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    maskedFirstName: ").append(toIndentedString(maskedFirstName)).append("\n");
    sb.append("    maskedLastName: ").append(toIndentedString(maskedLastName)).append("\n");
    sb.append("    maskedFullName: ").append(toIndentedString(maskedFullName)).append("\n");
    sb.append("    dateConsumerAdded: ").append(toIndentedString(dateConsumerAdded)).append("\n");
    sb.append("    dateConsumerLastUsed: ").append(toIndentedString(dateConsumerLastUsed)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("srcConsumerId");
    openapiFields.add("maskedConsumerIdentity");
    openapiFields.add("maskedEmailAddress");
    openapiFields.add("maskedMobileNumber");
    openapiFields.add("maskedNationalIdentifier");
    openapiFields.add("complianceSettings");
    openapiFields.add("countryCode");
    openapiFields.add("languageCode");
    openapiFields.add("status");
    openapiFields.add("maskedFirstName");
    openapiFields.add("maskedLastName");
    openapiFields.add("maskedFullName");
    openapiFields.add("dateConsumerAdded");
    openapiFields.add("dateConsumerLastUsed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("maskedConsumerIdentity");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("dateConsumerAdded");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MaskedConsumer
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MaskedConsumer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaskedConsumer is not found in the empty JSON string", MaskedConsumer.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MaskedConsumer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("srcConsumerId") != null && !jsonObj.get("srcConsumerId").isJsonNull()) && !jsonObj.get("srcConsumerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcConsumerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcConsumerId").toString()));
      }
      // validate the required field `maskedConsumerIdentity`
      MaskedConsumerIdentity.validateJsonElement(jsonObj.get("maskedConsumerIdentity"));
      if ((jsonObj.get("maskedEmailAddress") != null && !jsonObj.get("maskedEmailAddress").isJsonNull()) && !jsonObj.get("maskedEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedEmailAddress").toString()));
      }
      // validate the optional field `maskedMobileNumber`
      if (jsonObj.get("maskedMobileNumber") != null && !jsonObj.get("maskedMobileNumber").isJsonNull()) {
        PhoneNumber.validateJsonElement(jsonObj.get("maskedMobileNumber"));
      }
      if ((jsonObj.get("maskedNationalIdentifier") != null && !jsonObj.get("maskedNationalIdentifier").isJsonNull()) && !jsonObj.get("maskedNationalIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedNationalIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedNationalIdentifier").toString()));
      }
      // validate the optional field `complianceSettings`
      if (jsonObj.get("complianceSettings") != null && !jsonObj.get("complianceSettings").isJsonNull()) {
        ComplianceSettings.validateJsonElement(jsonObj.get("complianceSettings"));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      // validate the required field `status`
      ConsumerStatus.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("maskedFirstName") != null && !jsonObj.get("maskedFirstName").isJsonNull()) && !jsonObj.get("maskedFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedFirstName").toString()));
      }
      if ((jsonObj.get("maskedLastName") != null && !jsonObj.get("maskedLastName").isJsonNull()) && !jsonObj.get("maskedLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedLastName").toString()));
      }
      if ((jsonObj.get("maskedFullName") != null && !jsonObj.get("maskedFullName").isJsonNull()) && !jsonObj.get("maskedFullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedFullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedFullName").toString()));
      }
      if (!jsonObj.get("dateConsumerAdded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateConsumerAdded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateConsumerAdded").toString()));
      }
      if ((jsonObj.get("dateConsumerLastUsed") != null && !jsonObj.get("dateConsumerLastUsed").isJsonNull()) && !jsonObj.get("dateConsumerLastUsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateConsumerLastUsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateConsumerLastUsed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaskedConsumer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaskedConsumer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaskedConsumer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaskedConsumer.class));

       return (TypeAdapter<T>) new TypeAdapter<MaskedConsumer>() {
           @Override
           public void write(JsonWriter out, MaskedConsumer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MaskedConsumer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             MaskedConsumer instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MaskedConsumer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MaskedConsumer
  * @throws IOException if the JSON string is invalid with respect to MaskedConsumer
  */
  public static MaskedConsumer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaskedConsumer.class);
  }

 /**
  * Convert an instance of MaskedConsumer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

