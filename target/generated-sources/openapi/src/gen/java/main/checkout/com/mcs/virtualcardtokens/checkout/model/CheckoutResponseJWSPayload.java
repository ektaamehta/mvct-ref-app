/*
 * Mastercard Virtual Card Token Checkout API
 * Checkout end point used by Mastercard Virtual Card Token Integrators to receive payload data from the Mastercard Checkout Solutions and send the results of transaction authorization back to the Mastercard. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.checkout.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.checkout.model.AcceptanceChannelRelatedData;
import com.mcs.virtualcardtokens.checkout.model.AssuranceData;
import com.mcs.virtualcardtokens.checkout.model.MaskedCard;
import com.mcs.virtualcardtokens.checkout.model.MaskedConsumer;
import com.mcs.virtualcardtokens.checkout.model.Payload;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.checkout.invoker.JSON;

/**
 * The encryptedPayload property of CheckoutResponseJWSPayload is formatted as a string, which should be cast to the Payload schema. 
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:06.789601445Z[Etc/UTC]")
public class CheckoutResponseJWSPayload {
  public static final String SERIALIZED_NAME_SRC_CORRELATION_ID = "srcCorrelationId";
  @SerializedName(SERIALIZED_NAME_SRC_CORRELATION_ID)
  private String srcCorrelationId;

  public static final String SERIALIZED_NAME_SRCI_TRANSACTION_ID = "srciTransactionId";
  @SerializedName(SERIALIZED_NAME_SRCI_TRANSACTION_ID)
  private String srciTransactionId;

  public static final String SERIALIZED_NAME_ENCRYPTED_PAYLOAD = "encryptedPayload";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_PAYLOAD)
  private Payload encryptedPayload;

  public static final String SERIALIZED_NAME_MASKED_CARD = "maskedCard";
  @SerializedName(SERIALIZED_NAME_MASKED_CARD)
  private MaskedCard maskedCard;

  public static final String SERIALIZED_NAME_MASKED_CONSUMER = "maskedConsumer";
  @SerializedName(SERIALIZED_NAME_MASKED_CONSUMER)
  private MaskedConsumer maskedConsumer;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS_ZIP = "shippingAddressZip";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS_ZIP)
  private String shippingAddressZip;

  public static final String SERIALIZED_NAME_SHIPPING_COUNTRY_CODE = "shippingCountryCode";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COUNTRY_CODE)
  private String shippingCountryCode;

  public static final String SERIALIZED_NAME_ASSURANCE_DATA = "assuranceData";
  @SerializedName(SERIALIZED_NAME_ASSURANCE_DATA)
  private AssuranceData assuranceData;

  public static final String SERIALIZED_NAME_ACCEPTANCE_CHANNEL_RELATED_DATA = "acceptanceChannelRelatedData";
  @SerializedName(SERIALIZED_NAME_ACCEPTANCE_CHANNEL_RELATED_DATA)
  private AcceptanceChannelRelatedData acceptanceChannelRelatedData;

  public static final String SERIALIZED_NAME_KEY_FINGERPRINT_ID = "keyFingerprintId";
  @SerializedName(SERIALIZED_NAME_KEY_FINGERPRINT_ID)
  private String keyFingerprintId;

  public CheckoutResponseJWSPayload() {
  }

  public CheckoutResponseJWSPayload srcCorrelationId(String srcCorrelationId) {
    this.srcCorrelationId = srcCorrelationId;
    return this;
  }

   /**
   * A unique ID that correlates a series of two or more requests to a single session of activity. Mastercard Checkout Solutions will by default return a new srcCorrelationId in each response, but Integrators may choose to populate previously used srcCorrelationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated srcCorrelationId in the request, or by generating your own ID in the same format. SrcCorrelationId is used for tracking and troubleshooting purposes within Mastercard&#39;s ecosystem. 
   * @return srcCorrelationId
  **/
  @jakarta.annotation.Nonnull
  public String getSrcCorrelationId() {
    return srcCorrelationId;
  }

  public void setSrcCorrelationId(String srcCorrelationId) {
    this.srcCorrelationId = srcCorrelationId;
  }


  public CheckoutResponseJWSPayload srciTransactionId(String srciTransactionId) {
    this.srciTransactionId = srciTransactionId;
    return this;
  }

   /**
   * An optional UUID generated by the Integrator that may be passed for internal tracking purposes.
   * @return srciTransactionId
  **/
  @jakarta.annotation.Nullable
  public String getSrciTransactionId() {
    return srciTransactionId;
  }

  public void setSrciTransactionId(String srciTransactionId) {
    this.srciTransactionId = srciTransactionId;
  }


  public CheckoutResponseJWSPayload encryptedPayload(Payload encryptedPayload) {
    this.encryptedPayload = encryptedPayload;
    return this;
  }

   /**
   * Get encryptedPayload
   * @return encryptedPayload
  **/
  @jakarta.annotation.Nullable
  public Payload getEncryptedPayload() {
    return encryptedPayload;
  }

  public void setEncryptedPayload(Payload encryptedPayload) {
    this.encryptedPayload = encryptedPayload;
  }


  public CheckoutResponseJWSPayload maskedCard(MaskedCard maskedCard) {
    this.maskedCard = maskedCard;
    return this;
  }

   /**
   * Get maskedCard
   * @return maskedCard
  **/
  @jakarta.annotation.Nonnull
  public MaskedCard getMaskedCard() {
    return maskedCard;
  }

  public void setMaskedCard(MaskedCard maskedCard) {
    this.maskedCard = maskedCard;
  }


  public CheckoutResponseJWSPayload maskedConsumer(MaskedConsumer maskedConsumer) {
    this.maskedConsumer = maskedConsumer;
    return this;
  }

   /**
   * Get maskedConsumer
   * @return maskedConsumer
  **/
  @jakarta.annotation.Nullable
  public MaskedConsumer getMaskedConsumer() {
    return maskedConsumer;
  }

  public void setMaskedConsumer(MaskedConsumer maskedConsumer) {
    this.maskedConsumer = maskedConsumer;
  }


  public CheckoutResponseJWSPayload shippingAddressZip(String shippingAddressZip) {
    this.shippingAddressZip = shippingAddressZip;
    return this;
  }

   /**
   * The \&quot;shippingAddressZip\&quot; parameter will be present depending on the dpaShippingPreference option in the dpaTransactionOptions structure and either a shippingAddressId or shippingAddress object was present in the Checkout request data 
   * @return shippingAddressZip
  **/
  @jakarta.annotation.Nullable
  public String getShippingAddressZip() {
    return shippingAddressZip;
  }

  public void setShippingAddressZip(String shippingAddressZip) {
    this.shippingAddressZip = shippingAddressZip;
  }


  public CheckoutResponseJWSPayload shippingCountryCode(String shippingCountryCode) {
    this.shippingCountryCode = shippingCountryCode;
    return this;
  }

   /**
   * The \&quot;shippingCountryCode\&quot; parameter will be present depending on the dpaShippingPreference option in the dpaTransactionOptions structure and either a shippingAddressId or shippingAddress object was present in the Checkout request data 
   * @return shippingCountryCode
  **/
  @jakarta.annotation.Nullable
  public String getShippingCountryCode() {
    return shippingCountryCode;
  }

  public void setShippingCountryCode(String shippingCountryCode) {
    this.shippingCountryCode = shippingCountryCode;
  }


  public CheckoutResponseJWSPayload assuranceData(AssuranceData assuranceData) {
    this.assuranceData = assuranceData;
    return this;
  }

   /**
   * Get assuranceData
   * @return assuranceData
  **/
  @jakarta.annotation.Nullable
  public AssuranceData getAssuranceData() {
    return assuranceData;
  }

  public void setAssuranceData(AssuranceData assuranceData) {
    this.assuranceData = assuranceData;
  }


  public CheckoutResponseJWSPayload acceptanceChannelRelatedData(AcceptanceChannelRelatedData acceptanceChannelRelatedData) {
    this.acceptanceChannelRelatedData = acceptanceChannelRelatedData;
    return this;
  }

   /**
   * Get acceptanceChannelRelatedData
   * @return acceptanceChannelRelatedData
  **/
  @jakarta.annotation.Nullable
  public AcceptanceChannelRelatedData getAcceptanceChannelRelatedData() {
    return acceptanceChannelRelatedData;
  }

  public void setAcceptanceChannelRelatedData(AcceptanceChannelRelatedData acceptanceChannelRelatedData) {
    this.acceptanceChannelRelatedData = acceptanceChannelRelatedData;
  }


  public CheckoutResponseJWSPayload keyFingerprintId(String keyFingerprintId) {
    this.keyFingerprintId = keyFingerprintId;
    return this;
  }

   /**
   * Mastercard will use the encryption key associated with the supplied KID to encrypt the payload. If not supplied, the key which is marked as default will be used.
   * @return keyFingerprintId
  **/
  @jakarta.annotation.Nullable
  public String getKeyFingerprintId() {
    return keyFingerprintId;
  }

  public void setKeyFingerprintId(String keyFingerprintId) {
    this.keyFingerprintId = keyFingerprintId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CheckoutResponseJWSPayload instance itself
   */
  public CheckoutResponseJWSPayload putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutResponseJWSPayload checkoutResponseJWSPayload = (CheckoutResponseJWSPayload) o;
    return Objects.equals(this.srcCorrelationId, checkoutResponseJWSPayload.srcCorrelationId) &&
        Objects.equals(this.srciTransactionId, checkoutResponseJWSPayload.srciTransactionId) &&
        Objects.equals(this.encryptedPayload, checkoutResponseJWSPayload.encryptedPayload) &&
        Objects.equals(this.maskedCard, checkoutResponseJWSPayload.maskedCard) &&
        Objects.equals(this.maskedConsumer, checkoutResponseJWSPayload.maskedConsumer) &&
        Objects.equals(this.shippingAddressZip, checkoutResponseJWSPayload.shippingAddressZip) &&
        Objects.equals(this.shippingCountryCode, checkoutResponseJWSPayload.shippingCountryCode) &&
        Objects.equals(this.assuranceData, checkoutResponseJWSPayload.assuranceData) &&
        Objects.equals(this.acceptanceChannelRelatedData, checkoutResponseJWSPayload.acceptanceChannelRelatedData) &&
        Objects.equals(this.keyFingerprintId, checkoutResponseJWSPayload.keyFingerprintId)&&
        Objects.equals(this.additionalProperties, checkoutResponseJWSPayload.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcCorrelationId, srciTransactionId, encryptedPayload, maskedCard, maskedConsumer, shippingAddressZip, shippingCountryCode, assuranceData, acceptanceChannelRelatedData, keyFingerprintId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutResponseJWSPayload {\n");
    sb.append("    srcCorrelationId: ").append(toIndentedString(srcCorrelationId)).append("\n");
    sb.append("    srciTransactionId: ").append(toIndentedString(srciTransactionId)).append("\n");
    sb.append("    encryptedPayload: ").append(toIndentedString(encryptedPayload)).append("\n");
    sb.append("    maskedCard: ").append(toIndentedString(maskedCard)).append("\n");
    sb.append("    maskedConsumer: ").append(toIndentedString(maskedConsumer)).append("\n");
    sb.append("    shippingAddressZip: ").append(toIndentedString(shippingAddressZip)).append("\n");
    sb.append("    shippingCountryCode: ").append(toIndentedString(shippingCountryCode)).append("\n");
    sb.append("    assuranceData: ").append(toIndentedString(assuranceData)).append("\n");
    sb.append("    acceptanceChannelRelatedData: ").append(toIndentedString(acceptanceChannelRelatedData)).append("\n");
    sb.append("    keyFingerprintId: ").append(toIndentedString(keyFingerprintId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("srcCorrelationId");
    openapiFields.add("srciTransactionId");
    openapiFields.add("encryptedPayload");
    openapiFields.add("maskedCard");
    openapiFields.add("maskedConsumer");
    openapiFields.add("shippingAddressZip");
    openapiFields.add("shippingCountryCode");
    openapiFields.add("assuranceData");
    openapiFields.add("acceptanceChannelRelatedData");
    openapiFields.add("keyFingerprintId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("srcCorrelationId");
    openapiRequiredFields.add("maskedCard");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CheckoutResponseJWSPayload
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutResponseJWSPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutResponseJWSPayload is not found in the empty JSON string", CheckoutResponseJWSPayload.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutResponseJWSPayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("srcCorrelationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcCorrelationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcCorrelationId").toString()));
      }
      if ((jsonObj.get("srciTransactionId") != null && !jsonObj.get("srciTransactionId").isJsonNull()) && !jsonObj.get("srciTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srciTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srciTransactionId").toString()));
      }
      // validate the optional field `encryptedPayload`
      if (jsonObj.get("encryptedPayload") != null && !jsonObj.get("encryptedPayload").isJsonNull()) {
        Payload.validateJsonElement(jsonObj.get("encryptedPayload"));
      }
      // validate the required field `maskedCard`
      MaskedCard.validateJsonElement(jsonObj.get("maskedCard"));
      // validate the optional field `maskedConsumer`
      if (jsonObj.get("maskedConsumer") != null && !jsonObj.get("maskedConsumer").isJsonNull()) {
        MaskedConsumer.validateJsonElement(jsonObj.get("maskedConsumer"));
      }
      if ((jsonObj.get("shippingAddressZip") != null && !jsonObj.get("shippingAddressZip").isJsonNull()) && !jsonObj.get("shippingAddressZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingAddressZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingAddressZip").toString()));
      }
      if ((jsonObj.get("shippingCountryCode") != null && !jsonObj.get("shippingCountryCode").isJsonNull()) && !jsonObj.get("shippingCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingCountryCode").toString()));
      }
      // validate the optional field `assuranceData`
      if (jsonObj.get("assuranceData") != null && !jsonObj.get("assuranceData").isJsonNull()) {
        AssuranceData.validateJsonElement(jsonObj.get("assuranceData"));
      }
      // validate the optional field `acceptanceChannelRelatedData`
      if (jsonObj.get("acceptanceChannelRelatedData") != null && !jsonObj.get("acceptanceChannelRelatedData").isJsonNull()) {
        AcceptanceChannelRelatedData.validateJsonElement(jsonObj.get("acceptanceChannelRelatedData"));
      }
      if ((jsonObj.get("keyFingerprintId") != null && !jsonObj.get("keyFingerprintId").isJsonNull()) && !jsonObj.get("keyFingerprintId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyFingerprintId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyFingerprintId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutResponseJWSPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutResponseJWSPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutResponseJWSPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutResponseJWSPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutResponseJWSPayload>() {
           @Override
           public void write(JsonWriter out, CheckoutResponseJWSPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutResponseJWSPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             CheckoutResponseJWSPayload instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckoutResponseJWSPayload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckoutResponseJWSPayload
  * @throws IOException if the JSON string is invalid with respect to CheckoutResponseJWSPayload
  */
  public static CheckoutResponseJWSPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutResponseJWSPayload.class);
  }

 /**
  * Convert an instance of CheckoutResponseJWSPayload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

