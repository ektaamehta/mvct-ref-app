/*
 * Mastercard Virtual Card Token Checkout API
 * Checkout end point used by Mastercard Virtual Card Token Integrators to receive payload data from the Mastercard Checkout Solutions and send the results of transaction authorization back to the Mastercard. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.checkout.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.checkout.invoker.JSON;

/**
 * In the context of 3-D Secure (3DS), the browser is a conduit to transport messages between the 3DS Server (in the Acquirer domain) and the ACS (in the Issuer domain). This data is required for 3DS authentication and can either be automatically sourced or provided at the time of the request.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:06.789601445Z[Etc/UTC]")
public class Browser {
  public static final String SERIALIZED_NAME_ACCEPT_HEADER = "acceptHeader";
  @SerializedName(SERIALIZED_NAME_ACCEPT_HEADER)
  private String acceptHeader;

  public static final String SERIALIZED_NAME_JAVA_ENABLED = "javaEnabled";
  @SerializedName(SERIALIZED_NAME_JAVA_ENABLED)
  private Boolean javaEnabled;

  public static final String SERIALIZED_NAME_JAVASCRIPT_ENABLED = "javascriptEnabled";
  @SerializedName(SERIALIZED_NAME_JAVASCRIPT_ENABLED)
  private Boolean javascriptEnabled;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_COLOR_DEPTH = "colorDepth";
  @SerializedName(SERIALIZED_NAME_COLOR_DEPTH)
  private String colorDepth;

  public static final String SERIALIZED_NAME_SCREEN_HEIGHT = "screenHeight";
  @SerializedName(SERIALIZED_NAME_SCREEN_HEIGHT)
  private String screenHeight;

  public static final String SERIALIZED_NAME_SCREEN_WIDTH = "screenWidth";
  @SerializedName(SERIALIZED_NAME_SCREEN_WIDTH)
  private String screenWidth;

  public static final String SERIALIZED_NAME_TZ = "tz";
  @SerializedName(SERIALIZED_NAME_TZ)
  private String tz;

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public Browser() {
  }

  public Browser acceptHeader(String acceptHeader) {
    this.acceptHeader = acceptHeader;
    return this;
  }

   /**
   * Exact content of the HTTP accept headers as sent to the 3-D Secure (3DS) requestor from the Cardholder&#39;s browser.
   * @return acceptHeader
  **/
  @jakarta.annotation.Nullable
  public String getAcceptHeader() {
    return acceptHeader;
  }

  public void setAcceptHeader(String acceptHeader) {
    this.acceptHeader = acceptHeader;
  }


  public Browser javaEnabled(Boolean javaEnabled) {
    this.javaEnabled = javaEnabled;
    return this;
  }

   /**
   * Boolean that represents the ability of the Cardholder&#39;s browser to execute java.
   * @return javaEnabled
  **/
  @jakarta.annotation.Nullable
  public Boolean getJavaEnabled() {
    return javaEnabled;
  }

  public void setJavaEnabled(Boolean javaEnabled) {
    this.javaEnabled = javaEnabled;
  }


  public Browser javascriptEnabled(Boolean javascriptEnabled) {
    this.javascriptEnabled = javascriptEnabled;
    return this;
  }

   /**
   * Boolean that represents the ability of the Cardholder&#39;s browser to execute JavaScript.
   * @return javascriptEnabled
  **/
  @jakarta.annotation.Nullable
  public Boolean getJavascriptEnabled() {
    return javascriptEnabled;
  }

  public void setJavascriptEnabled(Boolean javascriptEnabled) {
    this.javascriptEnabled = javascriptEnabled;
  }


  public Browser ip(String ip) {
    this.ip = ip;
    return this;
  }

   /**
   * IP address of the browser as returned by the HTTP headers to the 3-D Secure (3DS) requestor.
   * @return ip
  **/
  @jakarta.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public Browser language(String language) {
    this.language = language;
    return this;
  }

   /**
   * Value representing the browser language as defined in IETF BCP47.
   * @return language
  **/
  @jakarta.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public Browser colorDepth(String colorDepth) {
    this.colorDepth = colorDepth;
    return this;
  }

   /**
   * Value representing the bit depth of the colour palette for displaying images, in bits per pixel.
   * @return colorDepth
  **/
  @jakarta.annotation.Nullable
  public String getColorDepth() {
    return colorDepth;
  }

  public void setColorDepth(String colorDepth) {
    this.colorDepth = colorDepth;
  }


  public Browser screenHeight(String screenHeight) {
    this.screenHeight = screenHeight;
    return this;
  }

   /**
   * Total height of the Cardholder’s screen in pixels.
   * @return screenHeight
  **/
  @jakarta.annotation.Nullable
  public String getScreenHeight() {
    return screenHeight;
  }

  public void setScreenHeight(String screenHeight) {
    this.screenHeight = screenHeight;
  }


  public Browser screenWidth(String screenWidth) {
    this.screenWidth = screenWidth;
    return this;
  }

   /**
   * Total width of the Cardholder’s screen in pixels.
   * @return screenWidth
  **/
  @jakarta.annotation.Nullable
  public String getScreenWidth() {
    return screenWidth;
  }

  public void setScreenWidth(String screenWidth) {
    this.screenWidth = screenWidth;
  }


  public Browser tz(String tz) {
    this.tz = tz;
    return this;
  }

   /**
   * Time-zone offset in minutes between UTC and the Cardholder browser local time.
   * @return tz
  **/
  @jakarta.annotation.Nullable
  public String getTz() {
    return tz;
  }

  public void setTz(String tz) {
    this.tz = tz;
  }


  public Browser userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

   /**
   * Exact content of the HTTP user-agent header.
   * @return userAgent
  **/
  @jakarta.annotation.Nullable
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Browser instance itself
   */
  public Browser putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Browser browser = (Browser) o;
    return Objects.equals(this.acceptHeader, browser.acceptHeader) &&
        Objects.equals(this.javaEnabled, browser.javaEnabled) &&
        Objects.equals(this.javascriptEnabled, browser.javascriptEnabled) &&
        Objects.equals(this.ip, browser.ip) &&
        Objects.equals(this.language, browser.language) &&
        Objects.equals(this.colorDepth, browser.colorDepth) &&
        Objects.equals(this.screenHeight, browser.screenHeight) &&
        Objects.equals(this.screenWidth, browser.screenWidth) &&
        Objects.equals(this.tz, browser.tz) &&
        Objects.equals(this.userAgent, browser.userAgent)&&
        Objects.equals(this.additionalProperties, browser.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptHeader, javaEnabled, javascriptEnabled, ip, language, colorDepth, screenHeight, screenWidth, tz, userAgent, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Browser {\n");
    sb.append("    acceptHeader: ").append(toIndentedString(acceptHeader)).append("\n");
    sb.append("    javaEnabled: ").append(toIndentedString(javaEnabled)).append("\n");
    sb.append("    javascriptEnabled: ").append(toIndentedString(javascriptEnabled)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    colorDepth: ").append(toIndentedString(colorDepth)).append("\n");
    sb.append("    screenHeight: ").append(toIndentedString(screenHeight)).append("\n");
    sb.append("    screenWidth: ").append(toIndentedString(screenWidth)).append("\n");
    sb.append("    tz: ").append(toIndentedString(tz)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptHeader");
    openapiFields.add("javaEnabled");
    openapiFields.add("javascriptEnabled");
    openapiFields.add("ip");
    openapiFields.add("language");
    openapiFields.add("colorDepth");
    openapiFields.add("screenHeight");
    openapiFields.add("screenWidth");
    openapiFields.add("tz");
    openapiFields.add("userAgent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Browser
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Browser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Browser is not found in the empty JSON string", Browser.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acceptHeader") != null && !jsonObj.get("acceptHeader").isJsonNull()) && !jsonObj.get("acceptHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceptHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acceptHeader").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("colorDepth") != null && !jsonObj.get("colorDepth").isJsonNull()) && !jsonObj.get("colorDepth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorDepth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorDepth").toString()));
      }
      if ((jsonObj.get("screenHeight") != null && !jsonObj.get("screenHeight").isJsonNull()) && !jsonObj.get("screenHeight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenHeight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenHeight").toString()));
      }
      if ((jsonObj.get("screenWidth") != null && !jsonObj.get("screenWidth").isJsonNull()) && !jsonObj.get("screenWidth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenWidth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenWidth").toString()));
      }
      if ((jsonObj.get("tz") != null && !jsonObj.get("tz").isJsonNull()) && !jsonObj.get("tz").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tz` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tz").toString()));
      }
      if ((jsonObj.get("userAgent") != null && !jsonObj.get("userAgent").isJsonNull()) && !jsonObj.get("userAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Browser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Browser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Browser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Browser.class));

       return (TypeAdapter<T>) new TypeAdapter<Browser>() {
           @Override
           public void write(JsonWriter out, Browser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Browser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Browser instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Browser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Browser
  * @throws IOException if the JSON string is invalid with respect to Browser
  */
  public static Browser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Browser.class);
  }

 /**
  * Convert an instance of Browser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

