/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.card.model.DelegatedAuthenticationModel;
import com.mcs.virtualcardtokens.card.model.DigitalCardData;
import com.mcs.virtualcardtokens.card.model.MfaEligibilityModel;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.card.invoker.JSON;

/**
 * Object for information related to a card enrolled in Mastercard Checkout Solutions (MCS). Details include card art, masked FPAN information, and token data.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:04.218510319Z[Etc/UTC]")
public class MaskedCard {
  public static final String SERIALIZED_NAME_SRC_DIGITAL_CARD_ID = "srcDigitalCardId";
  @SerializedName(SERIALIZED_NAME_SRC_DIGITAL_CARD_ID)
  private String srcDigitalCardId;

  public static final String SERIALIZED_NAME_PAN_BIN = "panBin";
  @SerializedName(SERIALIZED_NAME_PAN_BIN)
  private String panBin;

  public static final String SERIALIZED_NAME_PAN_LAST_FOUR = "panLastFour";
  @SerializedName(SERIALIZED_NAME_PAN_LAST_FOUR)
  private String panLastFour;

  public static final String SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE = "tokenUniqueReference";
  @SerializedName(SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE)
  private String tokenUniqueReference;

  public static final String SERIALIZED_NAME_TOKEN_LAST_FOUR = "tokenLastFour";
  @SerializedName(SERIALIZED_NAME_TOKEN_LAST_FOUR)
  private String tokenLastFour;

  public static final String SERIALIZED_NAME_TOKEN_EXPIRATION_MONTH = "tokenExpirationMonth";
  @SerializedName(SERIALIZED_NAME_TOKEN_EXPIRATION_MONTH)
  private String tokenExpirationMonth;

  public static final String SERIALIZED_NAME_TOKEN_EXPIRATION_YEAR = "tokenExpirationYear";
  @SerializedName(SERIALIZED_NAME_TOKEN_EXPIRATION_YEAR)
  private String tokenExpirationYear;

  public static final String SERIALIZED_NAME_DIGITAL_CARD_DATA = "digitalCardData";
  @SerializedName(SERIALIZED_NAME_DIGITAL_CARD_DATA)
  private DigitalCardData digitalCardData;

  public static final String SERIALIZED_NAME_PAN_EXPIRATION_MONTH = "panExpirationMonth";
  @SerializedName(SERIALIZED_NAME_PAN_EXPIRATION_MONTH)
  private String panExpirationMonth;

  public static final String SERIALIZED_NAME_PAN_EXPIRATION_YEAR = "panExpirationYear";
  @SerializedName(SERIALIZED_NAME_PAN_EXPIRATION_YEAR)
  private String panExpirationYear;

  public static final String SERIALIZED_NAME_PAYMENT_CARD_DESCRIPTOR = "paymentCardDescriptor";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CARD_DESCRIPTOR)
  private String paymentCardDescriptor;

  public static final String SERIALIZED_NAME_PAYMENT_CARD_TYPE = "paymentCardType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CARD_TYPE)
  private String paymentCardType;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_PAYMENT_ACCOUNT_REFERENCE = "paymentAccountReference";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ACCOUNT_REFERENCE)
  private String paymentAccountReference;

  public static final String SERIALIZED_NAME_DATE_OF_CARD_CREATED = "dateOfCardCreated";
  @SerializedName(SERIALIZED_NAME_DATE_OF_CARD_CREATED)
  private String dateOfCardCreated;

  public static final String SERIALIZED_NAME_DELEGATED_AUTHENTICATION_MODELS = "delegatedAuthenticationModels";
  @SerializedName(SERIALIZED_NAME_DELEGATED_AUTHENTICATION_MODELS)
  private List<DelegatedAuthenticationModel> delegatedAuthenticationModels;

  public static final String SERIALIZED_NAME_MFA_ELIGIBILITY = "mfaEligibility";
  @SerializedName(SERIALIZED_NAME_MFA_ELIGIBILITY)
  private List<MfaEligibilityModel> mfaEligibility;

  public MaskedCard() {
  }

  public MaskedCard srcDigitalCardId(String srcDigitalCardId) {
    this.srcDigitalCardId = srcDigitalCardId;
    return this;
  }

   /**
   * Unique Identifier of the Card.
   * @return srcDigitalCardId
  **/
  @jakarta.annotation.Nonnull
  public String getSrcDigitalCardId() {
    return srcDigitalCardId;
  }

  public void setSrcDigitalCardId(String srcDigitalCardId) {
    this.srcDigitalCardId = srcDigitalCardId;
  }


  public MaskedCard panBin(String panBin) {
    this.panBin = panBin;
    return this;
  }

   /**
   * The first six digits of a FPAN, typically the Issuer BIN, in an unmasked form.
   * @return panBin
  **/
  @jakarta.annotation.Nonnull
  public String getPanBin() {
    return panBin;
  }

  public void setPanBin(String panBin) {
    this.panBin = panBin;
  }


  public MaskedCard panLastFour(String panLastFour) {
    this.panLastFour = panLastFour;
    return this;
  }

   /**
   * Attribute of the card that represents the last four digits of the FPAN in an unmasked form.
   * @return panLastFour
  **/
  @jakarta.annotation.Nonnull
  public String getPanLastFour() {
    return panLastFour;
  }

  public void setPanLastFour(String panLastFour) {
    this.panLastFour = panLastFour;
  }


  public MaskedCard tokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
    return this;
  }

   /**
   * The value of a unique identifier for a token provided by Mastercard Digital Enablement Services (MDES). 
   * @return tokenUniqueReference
  **/
  @jakarta.annotation.Nullable
  public String getTokenUniqueReference() {
    return tokenUniqueReference;
  }

  public void setTokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
  }


  public MaskedCard tokenLastFour(String tokenLastFour) {
    this.tokenLastFour = tokenLastFour;
    return this;
  }

   /**
   * Last four digits of the payment token in an unmasked form.
   * @return tokenLastFour
  **/
  @jakarta.annotation.Nullable
  public String getTokenLastFour() {
    return tokenLastFour;
  }

  public void setTokenLastFour(String tokenLastFour) {
    this.tokenLastFour = tokenLastFour;
  }


  public MaskedCard tokenExpirationMonth(String tokenExpirationMonth) {
    this.tokenExpirationMonth = tokenExpirationMonth;
    return this;
  }

   /**
   * Expiration month of the token expressed as a two-digit calendar month.
   * @return tokenExpirationMonth
  **/
  @jakarta.annotation.Nullable
  public String getTokenExpirationMonth() {
    return tokenExpirationMonth;
  }

  public void setTokenExpirationMonth(String tokenExpirationMonth) {
    this.tokenExpirationMonth = tokenExpirationMonth;
  }


  public MaskedCard tokenExpirationYear(String tokenExpirationYear) {
    this.tokenExpirationYear = tokenExpirationYear;
    return this;
  }

   /**
   * Expiration year of the token expressed as four-digit calendar year.
   * @return tokenExpirationYear
  **/
  @jakarta.annotation.Nullable
  public String getTokenExpirationYear() {
    return tokenExpirationYear;
  }

  public void setTokenExpirationYear(String tokenExpirationYear) {
    this.tokenExpirationYear = tokenExpirationYear;
  }


  public MaskedCard digitalCardData(DigitalCardData digitalCardData) {
    this.digitalCardData = digitalCardData;
    return this;
  }

   /**
   * Get digitalCardData
   * @return digitalCardData
  **/
  @jakarta.annotation.Nonnull
  public DigitalCardData getDigitalCardData() {
    return digitalCardData;
  }

  public void setDigitalCardData(DigitalCardData digitalCardData) {
    this.digitalCardData = digitalCardData;
  }


  public MaskedCard panExpirationMonth(String panExpirationMonth) {
    this.panExpirationMonth = panExpirationMonth;
    return this;
  }

   /**
   * Expiration month of the card, expressed as a two-digit calendar month.
   * @return panExpirationMonth
  **/
  @jakarta.annotation.Nullable
  public String getPanExpirationMonth() {
    return panExpirationMonth;
  }

  public void setPanExpirationMonth(String panExpirationMonth) {
    this.panExpirationMonth = panExpirationMonth;
  }


  public MaskedCard panExpirationYear(String panExpirationYear) {
    this.panExpirationYear = panExpirationYear;
    return this;
  }

   /**
   * Expiration year of the card, expressed as a four-digit calendar year.
   * @return panExpirationYear
  **/
  @jakarta.annotation.Nullable
  public String getPanExpirationYear() {
    return panExpirationYear;
  }

  public void setPanExpirationYear(String panExpirationYear) {
    this.panExpirationYear = panExpirationYear;
  }


  public MaskedCard paymentCardDescriptor(String paymentCardDescriptor) {
    this.paymentCardDescriptor = paymentCardDescriptor;
    return this;
  }

   /**
   * Indicates the card payment network. This will be set to &#39;mastercard&#39; or &#39;maestro&#39;.
   * @return paymentCardDescriptor
  **/
  @jakarta.annotation.Nullable
  public String getPaymentCardDescriptor() {
    return paymentCardDescriptor;
  }

  public void setPaymentCardDescriptor(String paymentCardDescriptor) {
    this.paymentCardDescriptor = paymentCardDescriptor;
  }


  public MaskedCard paymentCardType(String paymentCardType) {
    this.paymentCardType = paymentCardType;
    return this;
  }

   /**
   * Conveys the card type. Note that COMBO and FLEX are for applicable regions, only.  Possible values:   * &#x60;CREDIT&#x60;   * &#x60;DEBIT&#x60;   * &#x60;PREPAID&#x60;   * &#x60;COMBO&#x60;   * &#x60;FLEX&#x60; 
   * @return paymentCardType
  **/
  @jakarta.annotation.Nullable
  public String getPaymentCardType() {
    return paymentCardType;
  }

  public void setPaymentCardType(String paymentCardType) {
    this.paymentCardType = paymentCardType;
  }


  public MaskedCard serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

   /**
   * A unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded.
   * @return serviceId
  **/
  @jakarta.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public MaskedCard paymentAccountReference(String paymentAccountReference) {
    this.paymentAccountReference = paymentAccountReference;
    return this;
  }

   /**
   * A non-financial reference assigned to each unique FPAN that&#39;s used to link the payment account of that PAN to affiliated payment tokens.
   * @return paymentAccountReference
  **/
  @jakarta.annotation.Nullable
  public String getPaymentAccountReference() {
    return paymentAccountReference;
  }

  public void setPaymentAccountReference(String paymentAccountReference) {
    this.paymentAccountReference = paymentAccountReference;
  }


  public MaskedCard dateOfCardCreated(String dateOfCardCreated) {
    this.dateOfCardCreated = dateOfCardCreated;
    return this;
  }

   /**
   * Date (in UTC) when the card was enrolled into the Mastercard Checkout Solutions (MCS) system.
   * @return dateOfCardCreated
  **/
  @jakarta.annotation.Nonnull
  public String getDateOfCardCreated() {
    return dateOfCardCreated;
  }

  public void setDateOfCardCreated(String dateOfCardCreated) {
    this.dateOfCardCreated = dateOfCardCreated;
  }


  public MaskedCard delegatedAuthenticationModels(List<DelegatedAuthenticationModel> delegatedAuthenticationModels) {
    this.delegatedAuthenticationModels = delegatedAuthenticationModels;
    return this;
  }

  public MaskedCard addDelegatedAuthenticationModelsItem(DelegatedAuthenticationModel delegatedAuthenticationModelsItem) {
    if (this.delegatedAuthenticationModels == null) {
      this.delegatedAuthenticationModels = new ArrayList<>();
    }
    this.delegatedAuthenticationModels.add(delegatedAuthenticationModelsItem);
    return this;
  }

   /**
   * Delegated authentication models for authenticating the consumer. For Secure Card on File (SCOF), this will only be available for enroll and get card responses.
   * @return delegatedAuthenticationModels
  **/
  @jakarta.annotation.Nullable
  public List<DelegatedAuthenticationModel> getDelegatedAuthenticationModels() {
    return delegatedAuthenticationModels;
  }

  public void setDelegatedAuthenticationModels(List<DelegatedAuthenticationModel> delegatedAuthenticationModels) {
    this.delegatedAuthenticationModels = delegatedAuthenticationModels;
  }


  public MaskedCard mfaEligibility(List<MfaEligibilityModel> mfaEligibility) {
    this.mfaEligibility = mfaEligibility;
    return this;
  }

  public MaskedCard addMfaEligibilityItem(MfaEligibilityModel mfaEligibilityItem) {
    if (this.mfaEligibility == null) {
      this.mfaEligibility = new ArrayList<>();
    }
    this.mfaEligibility.add(mfaEligibilityItem);
    return this;
  }

   /**
   * Container for information on Multi Factor Authentication eligibility
   * @return mfaEligibility
  **/
  @jakarta.annotation.Nullable
  public List<MfaEligibilityModel> getMfaEligibility() {
    return mfaEligibility;
  }

  public void setMfaEligibility(List<MfaEligibilityModel> mfaEligibility) {
    this.mfaEligibility = mfaEligibility;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MaskedCard instance itself
   */
  public MaskedCard putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaskedCard maskedCard = (MaskedCard) o;
    return Objects.equals(this.srcDigitalCardId, maskedCard.srcDigitalCardId) &&
        Objects.equals(this.panBin, maskedCard.panBin) &&
        Objects.equals(this.panLastFour, maskedCard.panLastFour) &&
        Objects.equals(this.tokenUniqueReference, maskedCard.tokenUniqueReference) &&
        Objects.equals(this.tokenLastFour, maskedCard.tokenLastFour) &&
        Objects.equals(this.tokenExpirationMonth, maskedCard.tokenExpirationMonth) &&
        Objects.equals(this.tokenExpirationYear, maskedCard.tokenExpirationYear) &&
        Objects.equals(this.digitalCardData, maskedCard.digitalCardData) &&
        Objects.equals(this.panExpirationMonth, maskedCard.panExpirationMonth) &&
        Objects.equals(this.panExpirationYear, maskedCard.panExpirationYear) &&
        Objects.equals(this.paymentCardDescriptor, maskedCard.paymentCardDescriptor) &&
        Objects.equals(this.paymentCardType, maskedCard.paymentCardType) &&
        Objects.equals(this.serviceId, maskedCard.serviceId) &&
        Objects.equals(this.paymentAccountReference, maskedCard.paymentAccountReference) &&
        Objects.equals(this.dateOfCardCreated, maskedCard.dateOfCardCreated) &&
        Objects.equals(this.delegatedAuthenticationModels, maskedCard.delegatedAuthenticationModels) &&
        Objects.equals(this.mfaEligibility, maskedCard.mfaEligibility)&&
        Objects.equals(this.additionalProperties, maskedCard.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcDigitalCardId, panBin, panLastFour, tokenUniqueReference, tokenLastFour, tokenExpirationMonth, tokenExpirationYear, digitalCardData, panExpirationMonth, panExpirationYear, paymentCardDescriptor, paymentCardType, serviceId, paymentAccountReference, dateOfCardCreated, delegatedAuthenticationModels, mfaEligibility, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaskedCard {\n");
    sb.append("    srcDigitalCardId: ").append(toIndentedString(srcDigitalCardId)).append("\n");
    sb.append("    panBin: ").append(toIndentedString(panBin)).append("\n");
    sb.append("    panLastFour: ").append(toIndentedString(panLastFour)).append("\n");
    sb.append("    tokenUniqueReference: ").append(toIndentedString(tokenUniqueReference)).append("\n");
    sb.append("    tokenLastFour: ").append(toIndentedString(tokenLastFour)).append("\n");
    sb.append("    tokenExpirationMonth: ").append(toIndentedString(tokenExpirationMonth)).append("\n");
    sb.append("    tokenExpirationYear: ").append(toIndentedString(tokenExpirationYear)).append("\n");
    sb.append("    digitalCardData: ").append(toIndentedString(digitalCardData)).append("\n");
    sb.append("    panExpirationMonth: ").append(toIndentedString(panExpirationMonth)).append("\n");
    sb.append("    panExpirationYear: ").append(toIndentedString(panExpirationYear)).append("\n");
    sb.append("    paymentCardDescriptor: ").append(toIndentedString(paymentCardDescriptor)).append("\n");
    sb.append("    paymentCardType: ").append(toIndentedString(paymentCardType)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    paymentAccountReference: ").append(toIndentedString(paymentAccountReference)).append("\n");
    sb.append("    dateOfCardCreated: ").append(toIndentedString(dateOfCardCreated)).append("\n");
    sb.append("    delegatedAuthenticationModels: ").append(toIndentedString(delegatedAuthenticationModels)).append("\n");
    sb.append("    mfaEligibility: ").append(toIndentedString(mfaEligibility)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("srcDigitalCardId");
    openapiFields.add("panBin");
    openapiFields.add("panLastFour");
    openapiFields.add("tokenUniqueReference");
    openapiFields.add("tokenLastFour");
    openapiFields.add("tokenExpirationMonth");
    openapiFields.add("tokenExpirationYear");
    openapiFields.add("digitalCardData");
    openapiFields.add("panExpirationMonth");
    openapiFields.add("panExpirationYear");
    openapiFields.add("paymentCardDescriptor");
    openapiFields.add("paymentCardType");
    openapiFields.add("serviceId");
    openapiFields.add("paymentAccountReference");
    openapiFields.add("dateOfCardCreated");
    openapiFields.add("delegatedAuthenticationModels");
    openapiFields.add("mfaEligibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("srcDigitalCardId");
    openapiRequiredFields.add("panBin");
    openapiRequiredFields.add("panLastFour");
    openapiRequiredFields.add("digitalCardData");
    openapiRequiredFields.add("dateOfCardCreated");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MaskedCard
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MaskedCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaskedCard is not found in the empty JSON string", MaskedCard.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MaskedCard.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("srcDigitalCardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcDigitalCardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcDigitalCardId").toString()));
      }
      if (!jsonObj.get("panBin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panBin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panBin").toString()));
      }
      if (!jsonObj.get("panLastFour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panLastFour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panLastFour").toString()));
      }
      if ((jsonObj.get("tokenUniqueReference") != null && !jsonObj.get("tokenUniqueReference").isJsonNull()) && !jsonObj.get("tokenUniqueReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenUniqueReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenUniqueReference").toString()));
      }
      if ((jsonObj.get("tokenLastFour") != null && !jsonObj.get("tokenLastFour").isJsonNull()) && !jsonObj.get("tokenLastFour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenLastFour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenLastFour").toString()));
      }
      if ((jsonObj.get("tokenExpirationMonth") != null && !jsonObj.get("tokenExpirationMonth").isJsonNull()) && !jsonObj.get("tokenExpirationMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenExpirationMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenExpirationMonth").toString()));
      }
      if ((jsonObj.get("tokenExpirationYear") != null && !jsonObj.get("tokenExpirationYear").isJsonNull()) && !jsonObj.get("tokenExpirationYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenExpirationYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenExpirationYear").toString()));
      }
      // validate the required field `digitalCardData`
      DigitalCardData.validateJsonElement(jsonObj.get("digitalCardData"));
      if ((jsonObj.get("panExpirationMonth") != null && !jsonObj.get("panExpirationMonth").isJsonNull()) && !jsonObj.get("panExpirationMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panExpirationMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panExpirationMonth").toString()));
      }
      if ((jsonObj.get("panExpirationYear") != null && !jsonObj.get("panExpirationYear").isJsonNull()) && !jsonObj.get("panExpirationYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panExpirationYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panExpirationYear").toString()));
      }
      if ((jsonObj.get("paymentCardDescriptor") != null && !jsonObj.get("paymentCardDescriptor").isJsonNull()) && !jsonObj.get("paymentCardDescriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentCardDescriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentCardDescriptor").toString()));
      }
      if ((jsonObj.get("paymentCardType") != null && !jsonObj.get("paymentCardType").isJsonNull()) && !jsonObj.get("paymentCardType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentCardType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentCardType").toString()));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("paymentAccountReference") != null && !jsonObj.get("paymentAccountReference").isJsonNull()) && !jsonObj.get("paymentAccountReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentAccountReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentAccountReference").toString()));
      }
      if (!jsonObj.get("dateOfCardCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfCardCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfCardCreated").toString()));
      }
      if (jsonObj.get("delegatedAuthenticationModels") != null && !jsonObj.get("delegatedAuthenticationModels").isJsonNull()) {
        JsonArray jsonArraydelegatedAuthenticationModels = jsonObj.getAsJsonArray("delegatedAuthenticationModels");
        if (jsonArraydelegatedAuthenticationModels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("delegatedAuthenticationModels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `delegatedAuthenticationModels` to be an array in the JSON string but got `%s`", jsonObj.get("delegatedAuthenticationModels").toString()));
          }

          // validate the optional field `delegatedAuthenticationModels` (array)
          for (int i = 0; i < jsonArraydelegatedAuthenticationModels.size(); i++) {
            DelegatedAuthenticationModel.validateJsonElement(jsonArraydelegatedAuthenticationModels.get(i));
          };
        }
      }
      if (jsonObj.get("mfaEligibility") != null && !jsonObj.get("mfaEligibility").isJsonNull()) {
        JsonArray jsonArraymfaEligibility = jsonObj.getAsJsonArray("mfaEligibility");
        if (jsonArraymfaEligibility != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mfaEligibility").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mfaEligibility` to be an array in the JSON string but got `%s`", jsonObj.get("mfaEligibility").toString()));
          }

          // validate the optional field `mfaEligibility` (array)
          for (int i = 0; i < jsonArraymfaEligibility.size(); i++) {
            MfaEligibilityModel.validateJsonElement(jsonArraymfaEligibility.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaskedCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaskedCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaskedCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaskedCard.class));

       return (TypeAdapter<T>) new TypeAdapter<MaskedCard>() {
           @Override
           public void write(JsonWriter out, MaskedCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MaskedCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             MaskedCard instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MaskedCard given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MaskedCard
  * @throws IOException if the JSON string is invalid with respect to MaskedCard
  */
  public static MaskedCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaskedCard.class);
  }

 /**
  * Convert an instance of MaskedCard to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

