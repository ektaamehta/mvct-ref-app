/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.card.model.AuthMethod;
import com.mcs.virtualcardtokens.card.model.CardPendingEvent;
import com.mcs.virtualcardtokens.card.model.DigitalCardStatus;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for DigitalCardData
 */
public class DigitalCardDataTest {
    private final DigitalCardData model = new DigitalCardData();

    /**
     * Model tests for DigitalCardData
     */
    @Test
    public void testDigitalCardData() {
        // TODO: test DigitalCardData
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'descriptorName'
     */
    @Test
    public void descriptorNameTest() {
        // TODO: test descriptorName
    }

    /**
     * Test the property 'artUri'
     */
    @Test
    public void artUriTest() {
        // TODO: test artUri
    }

    /**
     * Test the property 'pendingEvents'
     */
    @Test
    public void pendingEventsTest() {
        // TODO: test pendingEvents
    }

    /**
     * Test the property 'isCoBranded'
     */
    @Test
    public void isCoBrandedTest() {
        // TODO: test isCoBranded
    }

    /**
     * Test the property 'coBrandedName'
     */
    @Test
    public void coBrandedNameTest() {
        // TODO: test coBrandedName
    }

    /**
     * Test the property 'authenticationMethods'
     */
    @Test
    public void authenticationMethodsTest() {
        // TODO: test authenticationMethods
    }

    /**
     * Test the property 'issuerName'
     */
    @Test
    public void issuerNameTest() {
        // TODO: test issuerName
    }

    /**
     * Test the property 'longDescription'
     */
    @Test
    public void longDescriptionTest() {
        // TODO: test longDescription
    }

    /**
     * Test the property 'foregroundColor'
     */
    @Test
    public void foregroundColorTest() {
        // TODO: test foregroundColor
    }

}
