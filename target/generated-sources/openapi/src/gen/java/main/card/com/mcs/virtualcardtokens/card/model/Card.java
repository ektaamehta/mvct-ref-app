/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.card.invoker.JSON;

/**
 * Object for card data.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:04.218510319Z[Etc/UTC]")
public class Card {
  public static final String SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER = "primaryAccountNumber";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER)
  private String primaryAccountNumber;

  public static final String SERIALIZED_NAME_PAN_EXPIRATION_MONTH = "panExpirationMonth";
  @SerializedName(SERIALIZED_NAME_PAN_EXPIRATION_MONTH)
  private String panExpirationMonth;

  public static final String SERIALIZED_NAME_PAN_EXPIRATION_YEAR = "panExpirationYear";
  @SerializedName(SERIALIZED_NAME_PAN_EXPIRATION_YEAR)
  private String panExpirationYear;

  public static final String SERIALIZED_NAME_CARD_SECURITY_CODE = "cardSecurityCode";
  @SerializedName(SERIALIZED_NAME_CARD_SECURITY_CODE)
  private String cardSecurityCode;

  public Card() {
  }

  public Card primaryAccountNumber(String primaryAccountNumber) {
    this.primaryAccountNumber = primaryAccountNumber;
    return this;
  }

   /**
   * A variable length, ISO/IEC 7812-compliant account number that is generated within account ranges and associated with a BIN by an Issuer.
   * @return primaryAccountNumber
  **/
  @jakarta.annotation.Nonnull
  public String getPrimaryAccountNumber() {
    return primaryAccountNumber;
  }

  public void setPrimaryAccountNumber(String primaryAccountNumber) {
    this.primaryAccountNumber = primaryAccountNumber;
  }


  public Card panExpirationMonth(String panExpirationMonth) {
    this.panExpirationMonth = panExpirationMonth;
    return this;
  }

   /**
   * Expiration month of the card, expressed as a two-digit calendar month.
   * @return panExpirationMonth
  **/
  @jakarta.annotation.Nonnull
  public String getPanExpirationMonth() {
    return panExpirationMonth;
  }

  public void setPanExpirationMonth(String panExpirationMonth) {
    this.panExpirationMonth = panExpirationMonth;
  }


  public Card panExpirationYear(String panExpirationYear) {
    this.panExpirationYear = panExpirationYear;
    return this;
  }

   /**
   * Expiration year of the card, expressed as a four-digit calendar year.
   * @return panExpirationYear
  **/
  @jakarta.annotation.Nonnull
  public String getPanExpirationYear() {
    return panExpirationYear;
  }

  public void setPanExpirationYear(String panExpirationYear) {
    this.panExpirationYear = panExpirationYear;
  }


  public Card cardSecurityCode(String cardSecurityCode) {
    this.cardSecurityCode = cardSecurityCode;
    return this;
  }

   /**
   * Card Verification Value 2 (CVV2).
   * @return cardSecurityCode
  **/
  @jakarta.annotation.Nullable
  public String getCardSecurityCode() {
    return cardSecurityCode;
  }

  public void setCardSecurityCode(String cardSecurityCode) {
    this.cardSecurityCode = cardSecurityCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Card instance itself
   */
  public Card putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Card card = (Card) o;
    return Objects.equals(this.primaryAccountNumber, card.primaryAccountNumber) &&
        Objects.equals(this.panExpirationMonth, card.panExpirationMonth) &&
        Objects.equals(this.panExpirationYear, card.panExpirationYear) &&
        Objects.equals(this.cardSecurityCode, card.cardSecurityCode)&&
        Objects.equals(this.additionalProperties, card.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryAccountNumber, panExpirationMonth, panExpirationYear, cardSecurityCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Card {\n");
    sb.append("    primaryAccountNumber: ").append(toIndentedString(primaryAccountNumber)).append("\n");
    sb.append("    panExpirationMonth: ").append(toIndentedString(panExpirationMonth)).append("\n");
    sb.append("    panExpirationYear: ").append(toIndentedString(panExpirationYear)).append("\n");
    sb.append("    cardSecurityCode: ").append(toIndentedString(cardSecurityCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("primaryAccountNumber");
    openapiFields.add("panExpirationMonth");
    openapiFields.add("panExpirationYear");
    openapiFields.add("cardSecurityCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("primaryAccountNumber");
    openapiRequiredFields.add("panExpirationMonth");
    openapiRequiredFields.add("panExpirationYear");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Card
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Card.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Card is not found in the empty JSON string", Card.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Card.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("primaryAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAccountNumber").toString()));
      }
      if (!jsonObj.get("panExpirationMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panExpirationMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panExpirationMonth").toString()));
      }
      if (!jsonObj.get("panExpirationYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panExpirationYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panExpirationYear").toString()));
      }
      if ((jsonObj.get("cardSecurityCode") != null && !jsonObj.get("cardSecurityCode").isJsonNull()) && !jsonObj.get("cardSecurityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardSecurityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardSecurityCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Card.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Card' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Card> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Card.class));

       return (TypeAdapter<T>) new TypeAdapter<Card>() {
           @Override
           public void write(JsonWriter out, Card value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Card read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Card instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Card given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Card
  * @throws IOException if the JSON string is invalid with respect to Card
  */
  public static Card fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Card.class);
  }

 /**
  * Convert an instance of Card to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

