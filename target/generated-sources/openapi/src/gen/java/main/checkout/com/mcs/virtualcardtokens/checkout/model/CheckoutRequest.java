/*
 * Mastercard Virtual Card Token Checkout API
 * Checkout end point used by Mastercard Virtual Card Token Integrators to receive payload data from the Mastercard Checkout Solutions and send the results of transaction authorization back to the Mastercard. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.checkout.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.checkout.model.AcceptanceChannelRelatedData;
import com.mcs.virtualcardtokens.checkout.model.AssuranceData;
import com.mcs.virtualcardtokens.checkout.model.DigitalAccountCredentials;
import com.mcs.virtualcardtokens.checkout.model.DpaData;
import com.mcs.virtualcardtokens.checkout.model.DpaTransactionOptions;
import com.mcs.virtualcardtokens.checkout.model.PayloadTypeIndicator;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.checkout.invoker.JSON;

/**
 * The CheckoutRequest is used to retrieve a token and  dynamic data for a card enrolled into Mastercard Checkout Solutions. The token, dynamic data, and other parameters can be used for payment authoritzation.  The CheckoutRequest must contain the following values: * serviceId * srcClientId * srcDigitalCardId  The following values are conditional: * srcDpaId * transactionAmount 
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:06.789601445Z[Etc/UTC]")
public class CheckoutRequest {
  public static final String SERIALIZED_NAME_SRC_CLIENT_ID = "srcClientId";
  @SerializedName(SERIALIZED_NAME_SRC_CLIENT_ID)
  private String srcClientId;

  public static final String SERIALIZED_NAME_SRC_DPA_ID = "srcDpaId";
  @SerializedName(SERIALIZED_NAME_SRC_DPA_ID)
  private String srcDpaId;

  public static final String SERIALIZED_NAME_SRC_CORRELATION_ID = "srcCorrelationId";
  @SerializedName(SERIALIZED_NAME_SRC_CORRELATION_ID)
  private String srcCorrelationId;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_SRCI_TRANSACTION_ID = "srciTransactionId";
  @SerializedName(SERIALIZED_NAME_SRCI_TRANSACTION_ID)
  private String srciTransactionId;

  public static final String SERIALIZED_NAME_PAYLOAD_TYPE_INDICATOR_CHECKOUT = "payloadTypeIndicatorCheckout";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_TYPE_INDICATOR_CHECKOUT)
  private PayloadTypeIndicator payloadTypeIndicatorCheckout;

  public static final String SERIALIZED_NAME_RECIPIENT_ID_CHECKOUT = "recipientIdCheckout";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ID_CHECKOUT)
  private String recipientIdCheckout;

  public static final String SERIALIZED_NAME_SRC_DIGITAL_CARD_ID = "srcDigitalCardId";
  @SerializedName(SERIALIZED_NAME_SRC_DIGITAL_CARD_ID)
  private String srcDigitalCardId;

  public static final String SERIALIZED_NAME_DPA_TRANSACTION_OPTIONS = "dpaTransactionOptions";
  @SerializedName(SERIALIZED_NAME_DPA_TRANSACTION_OPTIONS)
  private DpaTransactionOptions dpaTransactionOptions;

  public static final String SERIALIZED_NAME_ASSURANCE_DATA = "assuranceData";
  @SerializedName(SERIALIZED_NAME_ASSURANCE_DATA)
  private AssuranceData assuranceData;

  public static final String SERIALIZED_NAME_DPA_DATA = "dpaData";
  @SerializedName(SERIALIZED_NAME_DPA_DATA)
  private DpaData dpaData;

  public static final String SERIALIZED_NAME_ACCEPTANCE_CHANNEL_RELATED_DATA = "acceptanceChannelRelatedData";
  @SerializedName(SERIALIZED_NAME_ACCEPTANCE_CHANNEL_RELATED_DATA)
  private AcceptanceChannelRelatedData acceptanceChannelRelatedData;

  public static final String SERIALIZED_NAME_KEY_FINGERPRINT_ID = "keyFingerprintId";
  @SerializedName(SERIALIZED_NAME_KEY_FINGERPRINT_ID)
  private String keyFingerprintId;

  public static final String SERIALIZED_NAME_DIGITAL_ACCOUNT_CREDENTIALS = "digitalAccountCredentials";
  @SerializedName(SERIALIZED_NAME_DIGITAL_ACCOUNT_CREDENTIALS)
  private DigitalAccountCredentials digitalAccountCredentials;

  public CheckoutRequest() {
  }

  public CheckoutRequest srcClientId(String srcClientId) {
    this.srcClientId = srcClientId;
    return this;
  }

   /**
   * A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS).
   * @return srcClientId
  **/
  @jakarta.annotation.Nonnull
  public String getSrcClientId() {
    return srcClientId;
  }

  public void setSrcClientId(String srcClientId) {
    this.srcClientId = srcClientId;
  }


  public CheckoutRequest srcDpaId(String srcDpaId) {
    this.srcDpaId = srcDpaId;
    return this;
  }

   /**
   * The registered identifier for the Digital Payment Application (DPA) accessing the service.  __Conditional__: Required if you are a Merchant directly integrating with Mastercard Checkout Solutions (MCS) APIs, a Payment Service Provider (PSP) integrating On-Behalf-Of (OBO) a Merchant, a Payment Facilitator, or if you are enrolling in the Secure Card on File (SCOF) QR program. 
   * @return srcDpaId
  **/
  @jakarta.annotation.Nullable
  public String getSrcDpaId() {
    return srcDpaId;
  }

  public void setSrcDpaId(String srcDpaId) {
    this.srcDpaId = srcDpaId;
  }


  public CheckoutRequest srcCorrelationId(String srcCorrelationId) {
    this.srcCorrelationId = srcCorrelationId;
    return this;
  }

   /**
   * A unique identifier that correlates a series of two or more requests to a single session of activity. Mastercard Checkout Solutions (MCS) will return a new srcCorrelationId in each response by default, but Integrators may choose to populate previously used srcCorrelationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated srcCorrelationId in the request, or by generating your own ID in the same format. SrcCorrelationId is used for tracking and troubleshooting purposes within Mastercard&#39;s ecosystem. 
   * @return srcCorrelationId
  **/
  @jakarta.annotation.Nullable
  public String getSrcCorrelationId() {
    return srcCorrelationId;
  }

  public void setSrcCorrelationId(String srcCorrelationId) {
    this.srcCorrelationId = srcCorrelationId;
  }


  public CheckoutRequest serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

   /**
   * A unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded.
   * @return serviceId
  **/
  @jakarta.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public CheckoutRequest srciTransactionId(String srciTransactionId) {
    this.srciTransactionId = srciTransactionId;
    return this;
  }

   /**
   * An optional UUID generated by the Integrator that may be passed for internal tracking purposes.
   * @return srciTransactionId
  **/
  @jakarta.annotation.Nullable
  public String getSrciTransactionId() {
    return srciTransactionId;
  }

  public void setSrciTransactionId(String srciTransactionId) {
    this.srciTransactionId = srciTransactionId;
  }


  public CheckoutRequest payloadTypeIndicatorCheckout(PayloadTypeIndicator payloadTypeIndicatorCheckout) {
    this.payloadTypeIndicatorCheckout = payloadTypeIndicatorCheckout;
    return this;
  }

   /**
   * Get payloadTypeIndicatorCheckout
   * @return payloadTypeIndicatorCheckout
  **/
  @jakarta.annotation.Nullable
  public PayloadTypeIndicator getPayloadTypeIndicatorCheckout() {
    return payloadTypeIndicatorCheckout;
  }

  public void setPayloadTypeIndicatorCheckout(PayloadTypeIndicator payloadTypeIndicatorCheckout) {
    this.payloadTypeIndicatorCheckout = payloadTypeIndicatorCheckout;
  }


  public CheckoutRequest recipientIdCheckout(String recipientIdCheckout) {
    this.recipientIdCheckout = recipientIdCheckout;
    return this;
  }

   /**
   * An SRC Client ID assigned to the Integrator by Mastercard during onboarding for the Mastercard Merchant Present QR : SRC program. 
   * @return recipientIdCheckout
  **/
  @jakarta.annotation.Nullable
  public String getRecipientIdCheckout() {
    return recipientIdCheckout;
  }

  public void setRecipientIdCheckout(String recipientIdCheckout) {
    this.recipientIdCheckout = recipientIdCheckout;
  }


  public CheckoutRequest srcDigitalCardId(String srcDigitalCardId) {
    this.srcDigitalCardId = srcDigitalCardId;
    return this;
  }

   /**
   * A unique identifier that represents the token associated with a card enrolled into Mastercard Checkout Solutions (MCS). Use this srcDigitalCardId in subsequent checkout requests to retrieve a DSRP payload containing the associated token and cryptogram for payment authorization. Alternatively, use the srcDigitalCardId in a get card request to retrieve the maskedCard details. 
   * @return srcDigitalCardId
  **/
  @jakarta.annotation.Nullable
  public String getSrcDigitalCardId() {
    return srcDigitalCardId;
  }

  public void setSrcDigitalCardId(String srcDigitalCardId) {
    this.srcDigitalCardId = srcDigitalCardId;
  }


  public CheckoutRequest dpaTransactionOptions(DpaTransactionOptions dpaTransactionOptions) {
    this.dpaTransactionOptions = dpaTransactionOptions;
    return this;
  }

   /**
   * Get dpaTransactionOptions
   * @return dpaTransactionOptions
  **/
  @jakarta.annotation.Nullable
  public DpaTransactionOptions getDpaTransactionOptions() {
    return dpaTransactionOptions;
  }

  public void setDpaTransactionOptions(DpaTransactionOptions dpaTransactionOptions) {
    this.dpaTransactionOptions = dpaTransactionOptions;
  }


  public CheckoutRequest assuranceData(AssuranceData assuranceData) {
    this.assuranceData = assuranceData;
    return this;
  }

   /**
   * Get assuranceData
   * @return assuranceData
  **/
  @jakarta.annotation.Nullable
  public AssuranceData getAssuranceData() {
    return assuranceData;
  }

  public void setAssuranceData(AssuranceData assuranceData) {
    this.assuranceData = assuranceData;
  }


  public CheckoutRequest dpaData(DpaData dpaData) {
    this.dpaData = dpaData;
    return this;
  }

   /**
   * Get dpaData
   * @return dpaData
  **/
  @jakarta.annotation.Nullable
  public DpaData getDpaData() {
    return dpaData;
  }

  public void setDpaData(DpaData dpaData) {
    this.dpaData = dpaData;
  }


  public CheckoutRequest acceptanceChannelRelatedData(AcceptanceChannelRelatedData acceptanceChannelRelatedData) {
    this.acceptanceChannelRelatedData = acceptanceChannelRelatedData;
    return this;
  }

   /**
   * Get acceptanceChannelRelatedData
   * @return acceptanceChannelRelatedData
  **/
  @jakarta.annotation.Nullable
  public AcceptanceChannelRelatedData getAcceptanceChannelRelatedData() {
    return acceptanceChannelRelatedData;
  }

  public void setAcceptanceChannelRelatedData(AcceptanceChannelRelatedData acceptanceChannelRelatedData) {
    this.acceptanceChannelRelatedData = acceptanceChannelRelatedData;
  }


  public CheckoutRequest keyFingerprintId(String keyFingerprintId) {
    this.keyFingerprintId = keyFingerprintId;
    return this;
  }

   /**
   * Mastercard will use the encryption key associated with the supplied KID to encrypt the payload. If not supplied, the key which is marked as default will be used.
   * @return keyFingerprintId
  **/
  @jakarta.annotation.Nullable
  public String getKeyFingerprintId() {
    return keyFingerprintId;
  }

  public void setKeyFingerprintId(String keyFingerprintId) {
    this.keyFingerprintId = keyFingerprintId;
  }


  public CheckoutRequest digitalAccountCredentials(DigitalAccountCredentials digitalAccountCredentials) {
    this.digitalAccountCredentials = digitalAccountCredentials;
    return this;
  }

   /**
   * Get digitalAccountCredentials
   * @return digitalAccountCredentials
  **/
  @jakarta.annotation.Nullable
  public DigitalAccountCredentials getDigitalAccountCredentials() {
    return digitalAccountCredentials;
  }

  public void setDigitalAccountCredentials(DigitalAccountCredentials digitalAccountCredentials) {
    this.digitalAccountCredentials = digitalAccountCredentials;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CheckoutRequest instance itself
   */
  public CheckoutRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutRequest checkoutRequest = (CheckoutRequest) o;
    return Objects.equals(this.srcClientId, checkoutRequest.srcClientId) &&
        Objects.equals(this.srcDpaId, checkoutRequest.srcDpaId) &&
        Objects.equals(this.srcCorrelationId, checkoutRequest.srcCorrelationId) &&
        Objects.equals(this.serviceId, checkoutRequest.serviceId) &&
        Objects.equals(this.srciTransactionId, checkoutRequest.srciTransactionId) &&
        Objects.equals(this.payloadTypeIndicatorCheckout, checkoutRequest.payloadTypeIndicatorCheckout) &&
        Objects.equals(this.recipientIdCheckout, checkoutRequest.recipientIdCheckout) &&
        Objects.equals(this.srcDigitalCardId, checkoutRequest.srcDigitalCardId) &&
        Objects.equals(this.dpaTransactionOptions, checkoutRequest.dpaTransactionOptions) &&
        Objects.equals(this.assuranceData, checkoutRequest.assuranceData) &&
        Objects.equals(this.dpaData, checkoutRequest.dpaData) &&
        Objects.equals(this.acceptanceChannelRelatedData, checkoutRequest.acceptanceChannelRelatedData) &&
        Objects.equals(this.keyFingerprintId, checkoutRequest.keyFingerprintId) &&
        Objects.equals(this.digitalAccountCredentials, checkoutRequest.digitalAccountCredentials)&&
        Objects.equals(this.additionalProperties, checkoutRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcClientId, srcDpaId, srcCorrelationId, serviceId, srciTransactionId, payloadTypeIndicatorCheckout, recipientIdCheckout, srcDigitalCardId, dpaTransactionOptions, assuranceData, dpaData, acceptanceChannelRelatedData, keyFingerprintId, digitalAccountCredentials, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutRequest {\n");
    sb.append("    srcClientId: ").append(toIndentedString(srcClientId)).append("\n");
    sb.append("    srcDpaId: ").append(toIndentedString(srcDpaId)).append("\n");
    sb.append("    srcCorrelationId: ").append(toIndentedString(srcCorrelationId)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    srciTransactionId: ").append(toIndentedString(srciTransactionId)).append("\n");
    sb.append("    payloadTypeIndicatorCheckout: ").append(toIndentedString(payloadTypeIndicatorCheckout)).append("\n");
    sb.append("    recipientIdCheckout: ").append(toIndentedString(recipientIdCheckout)).append("\n");
    sb.append("    srcDigitalCardId: ").append(toIndentedString(srcDigitalCardId)).append("\n");
    sb.append("    dpaTransactionOptions: ").append(toIndentedString(dpaTransactionOptions)).append("\n");
    sb.append("    assuranceData: ").append(toIndentedString(assuranceData)).append("\n");
    sb.append("    dpaData: ").append(toIndentedString(dpaData)).append("\n");
    sb.append("    acceptanceChannelRelatedData: ").append(toIndentedString(acceptanceChannelRelatedData)).append("\n");
    sb.append("    keyFingerprintId: ").append(toIndentedString(keyFingerprintId)).append("\n");
    sb.append("    digitalAccountCredentials: ").append(toIndentedString(digitalAccountCredentials)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("srcClientId");
    openapiFields.add("srcDpaId");
    openapiFields.add("srcCorrelationId");
    openapiFields.add("serviceId");
    openapiFields.add("srciTransactionId");
    openapiFields.add("payloadTypeIndicatorCheckout");
    openapiFields.add("recipientIdCheckout");
    openapiFields.add("srcDigitalCardId");
    openapiFields.add("dpaTransactionOptions");
    openapiFields.add("assuranceData");
    openapiFields.add("dpaData");
    openapiFields.add("acceptanceChannelRelatedData");
    openapiFields.add("keyFingerprintId");
    openapiFields.add("digitalAccountCredentials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("srcClientId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CheckoutRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutRequest is not found in the empty JSON string", CheckoutRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("srcClientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcClientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcClientId").toString()));
      }
      if ((jsonObj.get("srcDpaId") != null && !jsonObj.get("srcDpaId").isJsonNull()) && !jsonObj.get("srcDpaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcDpaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcDpaId").toString()));
      }
      if ((jsonObj.get("srcCorrelationId") != null && !jsonObj.get("srcCorrelationId").isJsonNull()) && !jsonObj.get("srcCorrelationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcCorrelationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcCorrelationId").toString()));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("srciTransactionId") != null && !jsonObj.get("srciTransactionId").isJsonNull()) && !jsonObj.get("srciTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srciTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srciTransactionId").toString()));
      }
      // validate the optional field `payloadTypeIndicatorCheckout`
      if (jsonObj.get("payloadTypeIndicatorCheckout") != null && !jsonObj.get("payloadTypeIndicatorCheckout").isJsonNull()) {
        PayloadTypeIndicator.validateJsonElement(jsonObj.get("payloadTypeIndicatorCheckout"));
      }
      if ((jsonObj.get("recipientIdCheckout") != null && !jsonObj.get("recipientIdCheckout").isJsonNull()) && !jsonObj.get("recipientIdCheckout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientIdCheckout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientIdCheckout").toString()));
      }
      if ((jsonObj.get("srcDigitalCardId") != null && !jsonObj.get("srcDigitalCardId").isJsonNull()) && !jsonObj.get("srcDigitalCardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcDigitalCardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcDigitalCardId").toString()));
      }
      // validate the optional field `dpaTransactionOptions`
      if (jsonObj.get("dpaTransactionOptions") != null && !jsonObj.get("dpaTransactionOptions").isJsonNull()) {
        DpaTransactionOptions.validateJsonElement(jsonObj.get("dpaTransactionOptions"));
      }
      // validate the optional field `assuranceData`
      if (jsonObj.get("assuranceData") != null && !jsonObj.get("assuranceData").isJsonNull()) {
        AssuranceData.validateJsonElement(jsonObj.get("assuranceData"));
      }
      // validate the optional field `dpaData`
      if (jsonObj.get("dpaData") != null && !jsonObj.get("dpaData").isJsonNull()) {
        DpaData.validateJsonElement(jsonObj.get("dpaData"));
      }
      // validate the optional field `acceptanceChannelRelatedData`
      if (jsonObj.get("acceptanceChannelRelatedData") != null && !jsonObj.get("acceptanceChannelRelatedData").isJsonNull()) {
        AcceptanceChannelRelatedData.validateJsonElement(jsonObj.get("acceptanceChannelRelatedData"));
      }
      if ((jsonObj.get("keyFingerprintId") != null && !jsonObj.get("keyFingerprintId").isJsonNull()) && !jsonObj.get("keyFingerprintId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyFingerprintId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyFingerprintId").toString()));
      }
      // validate the optional field `digitalAccountCredentials`
      if (jsonObj.get("digitalAccountCredentials") != null && !jsonObj.get("digitalAccountCredentials").isJsonNull()) {
        DigitalAccountCredentials.validateJsonElement(jsonObj.get("digitalAccountCredentials"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutRequest>() {
           @Override
           public void write(JsonWriter out, CheckoutRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             CheckoutRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckoutRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckoutRequest
  * @throws IOException if the JSON string is invalid with respect to CheckoutRequest
  */
  public static CheckoutRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutRequest.class);
  }

 /**
  * Convert an instance of CheckoutRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

