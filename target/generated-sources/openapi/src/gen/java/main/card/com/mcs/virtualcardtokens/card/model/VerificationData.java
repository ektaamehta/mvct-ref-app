/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.card.model.VerificationType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.card.invoker.JSON;

/**
 * Object for verification related information generated during authentication, depending on the type of verification.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:04.218510319Z[Etc/UTC]")
public class VerificationData {
  public static final String SERIALIZED_NAME_VERIFICATION_TYPE = "verificationType";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TYPE)
  private VerificationType verificationType;

  public static final String SERIALIZED_NAME_VERIFICATION_ENTITY = "verificationEntity";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ENTITY)
  private String verificationEntity;

  public static final String SERIALIZED_NAME_VERIFICATION_METHOD = "verificationMethod";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_METHOD)
  private String verificationMethod;

  public static final String SERIALIZED_NAME_VERIFICATION_RESULTS = "verificationResults";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_RESULTS)
  private String verificationResults;

  public static final String SERIALIZED_NAME_VERIFICATION_TIMESTAMP = "verificationTimestamp";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TIMESTAMP)
  private String verificationTimestamp;

  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additionalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  private byte[] additionalData;

  public static final String SERIALIZED_NAME_VERIFICATION_EVENTS = "verificationEvents";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_EVENTS)
  private List<String> verificationEvents = new ArrayList<>();

  public VerificationData() {
  }

  public VerificationData verificationType(VerificationType verificationType) {
    this.verificationType = verificationType;
    return this;
  }

   /**
   * Get verificationType
   * @return verificationType
  **/
  @jakarta.annotation.Nonnull
  public VerificationType getVerificationType() {
    return verificationType;
  }

  public void setVerificationType(VerificationType verificationType) {
    this.verificationType = verificationType;
  }


  public VerificationData verificationEntity(String verificationEntity) {
    this.verificationEntity = verificationEntity;
    return this;
  }

   /**
   * Entity performing or initiating Cardholder authentication. Valid values are:  * &#x60;\&quot;01\&quot; - Integrator&#x60;
   * @return verificationEntity
  **/
  @jakarta.annotation.Nonnull
  public String getVerificationEntity() {
    return verificationEntity;
  }

  public void setVerificationEntity(String verificationEntity) {
    this.verificationEntity = verificationEntity;
  }


  public VerificationData verificationMethod(String verificationMethod) {
    this.verificationMethod = verificationMethod;
    return this;
  }

   /**
   * Cardholder authentication method used by the Issuer.   Possible values are:   * &#x60;\&quot;21\&quot; - ID&amp;V during parent card enrollment&#x60;   * &#x60;\&quot;22\&quot; - DSRP&#x60;
   * @return verificationMethod
  **/
  @jakarta.annotation.Nonnull
  public String getVerificationMethod() {
    return verificationMethod;
  }

  public void setVerificationMethod(String verificationMethod) {
    this.verificationMethod = verificationMethod;
  }


  public VerificationData verificationResults(String verificationResults) {
    this.verificationResults = verificationResults;
    return this;
  }

   /**
   * Indicates whether the cardholder was verified or not, and what the results are when verified.  Possible values are:   * &#x60;\&quot;01\&quot; - Verified&#x60;
   * @return verificationResults
  **/
  @jakarta.annotation.Nonnull
  public String getVerificationResults() {
    return verificationResults;
  }

  public void setVerificationResults(String verificationResults) {
    this.verificationResults = verificationResults;
  }


  public VerificationData verificationTimestamp(String verificationTimestamp) {
    this.verificationTimestamp = verificationTimestamp;
    return this;
  }

   /**
   * Date and time when the verification was conducted. Format Epoch UTC Seconds.
   * @return verificationTimestamp
  **/
  @jakarta.annotation.Nonnull
  public String getVerificationTimestamp() {
    return verificationTimestamp;
  }

  public void setVerificationTimestamp(String verificationTimestamp) {
    this.verificationTimestamp = verificationTimestamp;
  }


  public VerificationData additionalData(byte[] additionalData) {
    this.additionalData = additionalData;
    return this;
  }

   /**
   * Object for data collected during Cardholder verification. The format may vary based on authentication method used.
   * @return additionalData
  **/
  @jakarta.annotation.Nullable
  public byte[] getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(byte[] additionalData) {
    this.additionalData = additionalData;
  }


  public VerificationData verificationEvents(List<String> verificationEvents) {
    this.verificationEvents = verificationEvents;
    return this;
  }

  public VerificationData addVerificationEventsItem(String verificationEventsItem) {
    if (this.verificationEvents == null) {
      this.verificationEvents = new ArrayList<>();
    }
    this.verificationEvents.add(verificationEventsItem);
    return this;
  }

   /**
   * Event that prompted the Cardholder authentication. For verificationType __CARDHOLDER__ , valid values are:   * &#x60;\&quot;02\&quot; - Add card/Card enrollment&#x60;
   * @return verificationEvents
  **/
  @jakarta.annotation.Nonnull
  public List<String> getVerificationEvents() {
    return verificationEvents;
  }

  public void setVerificationEvents(List<String> verificationEvents) {
    this.verificationEvents = verificationEvents;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VerificationData instance itself
   */
  public VerificationData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerificationData verificationData = (VerificationData) o;
    return Objects.equals(this.verificationType, verificationData.verificationType) &&
        Objects.equals(this.verificationEntity, verificationData.verificationEntity) &&
        Objects.equals(this.verificationMethod, verificationData.verificationMethod) &&
        Objects.equals(this.verificationResults, verificationData.verificationResults) &&
        Objects.equals(this.verificationTimestamp, verificationData.verificationTimestamp) &&
        Arrays.equals(this.additionalData, verificationData.additionalData) &&
        Objects.equals(this.verificationEvents, verificationData.verificationEvents)&&
        Objects.equals(this.additionalProperties, verificationData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(verificationType, verificationEntity, verificationMethod, verificationResults, verificationTimestamp, Arrays.hashCode(additionalData), verificationEvents, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerificationData {\n");
    sb.append("    verificationType: ").append(toIndentedString(verificationType)).append("\n");
    sb.append("    verificationEntity: ").append(toIndentedString(verificationEntity)).append("\n");
    sb.append("    verificationMethod: ").append(toIndentedString(verificationMethod)).append("\n");
    sb.append("    verificationResults: ").append(toIndentedString(verificationResults)).append("\n");
    sb.append("    verificationTimestamp: ").append(toIndentedString(verificationTimestamp)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    verificationEvents: ").append(toIndentedString(verificationEvents)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("verificationType");
    openapiFields.add("verificationEntity");
    openapiFields.add("verificationMethod");
    openapiFields.add("verificationResults");
    openapiFields.add("verificationTimestamp");
    openapiFields.add("additionalData");
    openapiFields.add("verificationEvents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("verificationType");
    openapiRequiredFields.add("verificationEntity");
    openapiRequiredFields.add("verificationMethod");
    openapiRequiredFields.add("verificationResults");
    openapiRequiredFields.add("verificationTimestamp");
    openapiRequiredFields.add("verificationEvents");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VerificationData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerificationData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerificationData is not found in the empty JSON string", VerificationData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VerificationData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `verificationType`
      VerificationType.validateJsonElement(jsonObj.get("verificationType"));
      if (!jsonObj.get("verificationEntity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationEntity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationEntity").toString()));
      }
      if (!jsonObj.get("verificationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationMethod").toString()));
      }
      if (!jsonObj.get("verificationResults").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationResults` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationResults").toString()));
      }
      if (!jsonObj.get("verificationTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationTimestamp").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("verificationEvents") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("verificationEvents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationEvents` to be an array in the JSON string but got `%s`", jsonObj.get("verificationEvents").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerificationData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerificationData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerificationData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerificationData.class));

       return (TypeAdapter<T>) new TypeAdapter<VerificationData>() {
           @Override
           public void write(JsonWriter out, VerificationData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VerificationData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             VerificationData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VerificationData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VerificationData
  * @throws IOException if the JSON string is invalid with respect to VerificationData
  */
  public static VerificationData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerificationData.class);
  }

 /**
  * Convert an instance of VerificationData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

