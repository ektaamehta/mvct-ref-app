/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.card.model.MaskedCard;
import com.mcs.virtualcardtokens.card.model.MaskedConsumer;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.card.invoker.JSON;

/**
 * The EnrollCardResponse for a successful enrollment will contain a srcDigitalCardId. A srcDigitalCardId is a unique identifier that represents the token associated with a card enrolled in Mastercard Checkout Solutions (MCS) and must be used in subsequent API calls.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:04.218510319Z[Etc/UTC]")
public class EnrollCardResponse {
  public static final String SERIALIZED_NAME_SRC_CORRELATION_ID = "srcCorrelationId";
  @SerializedName(SERIALIZED_NAME_SRC_CORRELATION_ID)
  private String srcCorrelationId;

  public static final String SERIALIZED_NAME_MASKED_CARD = "maskedCard";
  @SerializedName(SERIALIZED_NAME_MASKED_CARD)
  private MaskedCard maskedCard;

  public static final String SERIALIZED_NAME_MASKED_CONSUMER = "maskedConsumer";
  @SerializedName(SERIALIZED_NAME_MASKED_CONSUMER)
  private MaskedConsumer maskedConsumer;

  public static final String SERIALIZED_NAME_ENCRYPTED_PUSH_ACCOUNT_DATA = "encryptedPushAccountData";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_PUSH_ACCOUNT_DATA)
  private String encryptedPushAccountData;

  public static final String SERIALIZED_NAME_KEY_FINGERPRINT_ID = "keyFingerprintId";
  @SerializedName(SERIALIZED_NAME_KEY_FINGERPRINT_ID)
  private String keyFingerprintId;

  public static final String SERIALIZED_NAME_ENCRYPTED_PAYMENT_DATA = "encryptedPaymentData";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_PAYMENT_DATA)
  private String encryptedPaymentData;

  public EnrollCardResponse() {
  }

  public EnrollCardResponse srcCorrelationId(String srcCorrelationId) {
    this.srcCorrelationId = srcCorrelationId;
    return this;
  }

   /**
   * A unique identifier that correlates a series of two or more requests to a single session of activity. Mastercard Checkout Solutions (MCS) will return a new srcCorrelationId in each response by default, but Integrators may choose to populate previously used srcCorrelationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated srcCorrelationId in the request, or by generating your own ID in the same format. SrcCorrelationId is used for tracking and troubleshooting purposes within Mastercard&#39;s ecosystem.
   * @return srcCorrelationId
  **/
  @jakarta.annotation.Nonnull
  public String getSrcCorrelationId() {
    return srcCorrelationId;
  }

  public void setSrcCorrelationId(String srcCorrelationId) {
    this.srcCorrelationId = srcCorrelationId;
  }


  public EnrollCardResponse maskedCard(MaskedCard maskedCard) {
    this.maskedCard = maskedCard;
    return this;
  }

   /**
   * Get maskedCard
   * @return maskedCard
  **/
  @jakarta.annotation.Nonnull
  public MaskedCard getMaskedCard() {
    return maskedCard;
  }

  public void setMaskedCard(MaskedCard maskedCard) {
    this.maskedCard = maskedCard;
  }


  public EnrollCardResponse maskedConsumer(MaskedConsumer maskedConsumer) {
    this.maskedConsumer = maskedConsumer;
    return this;
  }

   /**
   * Get maskedConsumer
   * @return maskedConsumer
  **/
  @jakarta.annotation.Nullable
  public MaskedConsumer getMaskedConsumer() {
    return maskedConsumer;
  }

  public void setMaskedConsumer(MaskedConsumer maskedConsumer) {
    this.maskedConsumer = maskedConsumer;
  }


  public EnrollCardResponse encryptedPushAccountData(String encryptedPushAccountData) {
    this.encryptedPushAccountData = encryptedPushAccountData;
    return this;
  }

   /**
   * Encrypted card data in the form of a JWE[$ref: &#39;#/schemas/PushAccountReceiptCardDetails&#39;] string that contains the card details for push account receipt with address. It is returned for push account receipt enrollment.
   * @return encryptedPushAccountData
  **/
  @jakarta.annotation.Nullable
  public String getEncryptedPushAccountData() {
    return encryptedPushAccountData;
  }

  public void setEncryptedPushAccountData(String encryptedPushAccountData) {
    this.encryptedPushAccountData = encryptedPushAccountData;
  }


  public EnrollCardResponse keyFingerprintId(String keyFingerprintId) {
    this.keyFingerprintId = keyFingerprintId;
    return this;
  }

   /**
   * Mastercard will use the encryption key associated with the supplied KID to encrypt the payload. If not supplied, the key which is marked as default will be used.
   * @return keyFingerprintId
  **/
  @jakarta.annotation.Nullable
  public String getKeyFingerprintId() {
    return keyFingerprintId;
  }

  public void setKeyFingerprintId(String keyFingerprintId) {
    this.keyFingerprintId = keyFingerprintId;
  }


  public EnrollCardResponse encryptedPaymentData(String encryptedPaymentData) {
    this.encryptedPaymentData = encryptedPaymentData;
    return this;
  }

   /**
   * Contains token information including payment token and token expiry. This is in a JWE[$ref: &#39;#/schemas/PaymentData&#39;] format.
   * @return encryptedPaymentData
  **/
  @jakarta.annotation.Nullable
  public String getEncryptedPaymentData() {
    return encryptedPaymentData;
  }

  public void setEncryptedPaymentData(String encryptedPaymentData) {
    this.encryptedPaymentData = encryptedPaymentData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EnrollCardResponse instance itself
   */
  public EnrollCardResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnrollCardResponse enrollCardResponse = (EnrollCardResponse) o;
    return Objects.equals(this.srcCorrelationId, enrollCardResponse.srcCorrelationId) &&
        Objects.equals(this.maskedCard, enrollCardResponse.maskedCard) &&
        Objects.equals(this.maskedConsumer, enrollCardResponse.maskedConsumer) &&
        Objects.equals(this.encryptedPushAccountData, enrollCardResponse.encryptedPushAccountData) &&
        Objects.equals(this.keyFingerprintId, enrollCardResponse.keyFingerprintId) &&
        Objects.equals(this.encryptedPaymentData, enrollCardResponse.encryptedPaymentData)&&
        Objects.equals(this.additionalProperties, enrollCardResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcCorrelationId, maskedCard, maskedConsumer, encryptedPushAccountData, keyFingerprintId, encryptedPaymentData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnrollCardResponse {\n");
    sb.append("    srcCorrelationId: ").append(toIndentedString(srcCorrelationId)).append("\n");
    sb.append("    maskedCard: ").append(toIndentedString(maskedCard)).append("\n");
    sb.append("    maskedConsumer: ").append(toIndentedString(maskedConsumer)).append("\n");
    sb.append("    encryptedPushAccountData: ").append(toIndentedString(encryptedPushAccountData)).append("\n");
    sb.append("    keyFingerprintId: ").append(toIndentedString(keyFingerprintId)).append("\n");
    sb.append("    encryptedPaymentData: ").append(toIndentedString(encryptedPaymentData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("srcCorrelationId");
    openapiFields.add("maskedCard");
    openapiFields.add("maskedConsumer");
    openapiFields.add("encryptedPushAccountData");
    openapiFields.add("keyFingerprintId");
    openapiFields.add("encryptedPaymentData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("srcCorrelationId");
    openapiRequiredFields.add("maskedCard");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EnrollCardResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnrollCardResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnrollCardResponse is not found in the empty JSON string", EnrollCardResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnrollCardResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("srcCorrelationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcCorrelationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcCorrelationId").toString()));
      }
      // validate the required field `maskedCard`
      MaskedCard.validateJsonElement(jsonObj.get("maskedCard"));
      // validate the optional field `maskedConsumer`
      if (jsonObj.get("maskedConsumer") != null && !jsonObj.get("maskedConsumer").isJsonNull()) {
        MaskedConsumer.validateJsonElement(jsonObj.get("maskedConsumer"));
      }
      if ((jsonObj.get("encryptedPushAccountData") != null && !jsonObj.get("encryptedPushAccountData").isJsonNull()) && !jsonObj.get("encryptedPushAccountData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptedPushAccountData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptedPushAccountData").toString()));
      }
      if ((jsonObj.get("keyFingerprintId") != null && !jsonObj.get("keyFingerprintId").isJsonNull()) && !jsonObj.get("keyFingerprintId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyFingerprintId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyFingerprintId").toString()));
      }
      if ((jsonObj.get("encryptedPaymentData") != null && !jsonObj.get("encryptedPaymentData").isJsonNull()) && !jsonObj.get("encryptedPaymentData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptedPaymentData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptedPaymentData").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnrollCardResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnrollCardResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnrollCardResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnrollCardResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EnrollCardResponse>() {
           @Override
           public void write(JsonWriter out, EnrollCardResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EnrollCardResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             EnrollCardResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EnrollCardResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EnrollCardResponse
  * @throws IOException if the JSON string is invalid with respect to EnrollCardResponse
  */
  public static EnrollCardResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnrollCardResponse.class);
  }

 /**
  * Convert an instance of EnrollCardResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

