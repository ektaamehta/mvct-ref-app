/*
 * Mastercard Checkout Solutions Card API
 * API definitions for Mastercard Secure Card on File Cards API Endpoint. The Cards endpoint enrolls a mastercard card into a specified Secure Card on File. The Get Card by ID will retrieve the MaskedCard details, for the specified card ID. Delete card by card ID will delete the previously enrolled card. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.virtualcardtokens.card.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.virtualcardtokens.card.model.AuthMethod;
import com.mcs.virtualcardtokens.card.model.CardPendingEvent;
import com.mcs.virtualcardtokens.card.model.DigitalCardStatus;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.virtualcardtokens.card.invoker.JSON;

/**
 * Object for card data including token info, status, card art, and card descriptors.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown
= true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-05T17:57:04.218510319Z[Etc/UTC]")
public class DigitalCardData {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DigitalCardStatus status;

  public static final String SERIALIZED_NAME_DESCRIPTOR_NAME = "descriptorName";
  @SerializedName(SERIALIZED_NAME_DESCRIPTOR_NAME)
  private String descriptorName;

  public static final String SERIALIZED_NAME_ART_URI = "artUri";
  @SerializedName(SERIALIZED_NAME_ART_URI)
  private String artUri;

  public static final String SERIALIZED_NAME_PENDING_EVENTS = "pendingEvents";
  @SerializedName(SERIALIZED_NAME_PENDING_EVENTS)
  private List<CardPendingEvent> pendingEvents;

  public static final String SERIALIZED_NAME_IS_CO_BRANDED = "isCoBranded";
  @SerializedName(SERIALIZED_NAME_IS_CO_BRANDED)
  private String isCoBranded;

  public static final String SERIALIZED_NAME_CO_BRANDED_NAME = "coBrandedName";
  @SerializedName(SERIALIZED_NAME_CO_BRANDED_NAME)
  private String coBrandedName;

  public static final String SERIALIZED_NAME_AUTHENTICATION_METHODS = "authenticationMethods";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_METHODS)
  private List<AuthMethod> authenticationMethods;

  public static final String SERIALIZED_NAME_ISSUER_NAME = "issuerName";
  @SerializedName(SERIALIZED_NAME_ISSUER_NAME)
  private String issuerName;

  public static final String SERIALIZED_NAME_LONG_DESCRIPTION = "longDescription";
  @SerializedName(SERIALIZED_NAME_LONG_DESCRIPTION)
  private String longDescription;

  public static final String SERIALIZED_NAME_FOREGROUND_COLOR = "foregroundColor";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_COLOR)
  private String foregroundColor;

  public DigitalCardData() {
  }

  public DigitalCardData status(DigitalCardStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nonnull
  public DigitalCardStatus getStatus() {
    return status;
  }

  public void setStatus(DigitalCardStatus status) {
    this.status = status;
  }


  public DigitalCardData descriptorName(String descriptorName) {
    this.descriptorName = descriptorName;
    return this;
  }

   /**
   * Issuers name their card portfolios, and they will create both long descriptions and short descriptions to market their cards to Cardholders. This is the short description for a card.
   * @return descriptorName
  **/
  @jakarta.annotation.Nonnull
  public String getDescriptorName() {
    return descriptorName;
  }

  public void setDescriptorName(String descriptorName) {
    this.descriptorName = descriptorName;
  }


  public DigitalCardData artUri(String artUri) {
    this.artUri = artUri;
    return this;
  }

   /**
   * URI that digitally represents the physical look of a card. This card art image can be used for presentation purposes in user experiences and is provided by Issuers.
   * @return artUri
  **/
  @jakarta.annotation.Nonnull
  public String getArtUri() {
    return artUri;
  }

  public void setArtUri(String artUri) {
    this.artUri = artUri;
  }


  public DigitalCardData pendingEvents(List<CardPendingEvent> pendingEvents) {
    this.pendingEvents = pendingEvents;
    return this;
  }

  public DigitalCardData addPendingEventsItem(CardPendingEvent pendingEventsItem) {
    if (this.pendingEvents == null) {
      this.pendingEvents = new ArrayList<>();
    }
    this.pendingEvents.add(pendingEventsItem);
    return this;
  }

   /**
   * Set of events that are pending completion, such as address verification or Strong Cardholder Authentication (SCA): 
   * @return pendingEvents
  **/
  @jakarta.annotation.Nullable
  public List<CardPendingEvent> getPendingEvents() {
    return pendingEvents;
  }

  public void setPendingEvents(List<CardPendingEvent> pendingEvents) {
    this.pendingEvents = pendingEvents;
  }


  public DigitalCardData isCoBranded(String isCoBranded) {
    this.isCoBranded = isCoBranded;
    return this;
  }

   /**
   * Indicates whether the card is co-branded.
   * @return isCoBranded
  **/
  @jakarta.annotation.Nullable
  public String getIsCoBranded() {
    return isCoBranded;
  }

  public void setIsCoBranded(String isCoBranded) {
    this.isCoBranded = isCoBranded;
  }


  public DigitalCardData coBrandedName(String coBrandedName) {
    this.coBrandedName = coBrandedName;
    return this;
  }

   /**
   * Name of the company partnering with an Issuer for a co-branded card.
   * @return coBrandedName
  **/
  @jakarta.annotation.Nullable
  public String getCoBrandedName() {
    return coBrandedName;
  }

  public void setCoBrandedName(String coBrandedName) {
    this.coBrandedName = coBrandedName;
  }


  public DigitalCardData authenticationMethods(List<AuthMethod> authenticationMethods) {
    this.authenticationMethods = authenticationMethods;
    return this;
  }

  public DigitalCardData addAuthenticationMethodsItem(AuthMethod authenticationMethodsItem) {
    if (this.authenticationMethods == null) {
      this.authenticationMethods = new ArrayList<>();
    }
    this.authenticationMethods.add(authenticationMethodsItem);
    return this;
  }

   /**
   * Object for Issuer supported Cardholder authentication methods for the card, including authenticationCredential and authenticationMethodType. 
   * @return authenticationMethods
  **/
  @jakarta.annotation.Nullable
  public List<AuthMethod> getAuthenticationMethods() {
    return authenticationMethods;
  }

  public void setAuthenticationMethods(List<AuthMethod> authenticationMethods) {
    this.authenticationMethods = authenticationMethods;
  }


  public DigitalCardData issuerName(String issuerName) {
    this.issuerName = issuerName;
    return this;
  }

   /**
   * Name of the issuing bank.
   * @return issuerName
  **/
  @jakarta.annotation.Nullable
  public String getIssuerName() {
    return issuerName;
  }

  public void setIssuerName(String issuerName) {
    this.issuerName = issuerName;
  }


  public DigitalCardData longDescription(String longDescription) {
    this.longDescription = longDescription;
    return this;
  }

   /**
   * Banks name their card portfolios, and they will create both long descriptions and short descriptions to market their cards to Cardholders. This is the long description for a card.
   * @return longDescription
  **/
  @jakarta.annotation.Nullable
  public String getLongDescription() {
    return longDescription;
  }

  public void setLongDescription(String longDescription) {
    this.longDescription = longDescription;
  }


  public DigitalCardData foregroundColor(String foregroundColor) {
    this.foregroundColor = foregroundColor;
    return this;
  }

   /**
   * Foreground color used to overlay text on top of the card image. This is always returned in the product configuration object.
   * @return foregroundColor
  **/
  @jakarta.annotation.Nullable
  public String getForegroundColor() {
    return foregroundColor;
  }

  public void setForegroundColor(String foregroundColor) {
    this.foregroundColor = foregroundColor;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DigitalCardData instance itself
   */
  public DigitalCardData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalCardData digitalCardData = (DigitalCardData) o;
    return Objects.equals(this.status, digitalCardData.status) &&
        Objects.equals(this.descriptorName, digitalCardData.descriptorName) &&
        Objects.equals(this.artUri, digitalCardData.artUri) &&
        Objects.equals(this.pendingEvents, digitalCardData.pendingEvents) &&
        Objects.equals(this.isCoBranded, digitalCardData.isCoBranded) &&
        Objects.equals(this.coBrandedName, digitalCardData.coBrandedName) &&
        Objects.equals(this.authenticationMethods, digitalCardData.authenticationMethods) &&
        Objects.equals(this.issuerName, digitalCardData.issuerName) &&
        Objects.equals(this.longDescription, digitalCardData.longDescription) &&
        Objects.equals(this.foregroundColor, digitalCardData.foregroundColor)&&
        Objects.equals(this.additionalProperties, digitalCardData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, descriptorName, artUri, pendingEvents, isCoBranded, coBrandedName, authenticationMethods, issuerName, longDescription, foregroundColor, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalCardData {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    descriptorName: ").append(toIndentedString(descriptorName)).append("\n");
    sb.append("    artUri: ").append(toIndentedString(artUri)).append("\n");
    sb.append("    pendingEvents: ").append(toIndentedString(pendingEvents)).append("\n");
    sb.append("    isCoBranded: ").append(toIndentedString(isCoBranded)).append("\n");
    sb.append("    coBrandedName: ").append(toIndentedString(coBrandedName)).append("\n");
    sb.append("    authenticationMethods: ").append(toIndentedString(authenticationMethods)).append("\n");
    sb.append("    issuerName: ").append(toIndentedString(issuerName)).append("\n");
    sb.append("    longDescription: ").append(toIndentedString(longDescription)).append("\n");
    sb.append("    foregroundColor: ").append(toIndentedString(foregroundColor)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("descriptorName");
    openapiFields.add("artUri");
    openapiFields.add("pendingEvents");
    openapiFields.add("isCoBranded");
    openapiFields.add("coBrandedName");
    openapiFields.add("authenticationMethods");
    openapiFields.add("issuerName");
    openapiFields.add("longDescription");
    openapiFields.add("foregroundColor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("descriptorName");
    openapiRequiredFields.add("artUri");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DigitalCardData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalCardData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalCardData is not found in the empty JSON string", DigitalCardData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DigitalCardData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `status`
      DigitalCardStatus.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("descriptorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptorName").toString()));
      }
      if (!jsonObj.get("artUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artUri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pendingEvents") != null && !jsonObj.get("pendingEvents").isJsonNull() && !jsonObj.get("pendingEvents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pendingEvents` to be an array in the JSON string but got `%s`", jsonObj.get("pendingEvents").toString()));
      }
      if ((jsonObj.get("isCoBranded") != null && !jsonObj.get("isCoBranded").isJsonNull()) && !jsonObj.get("isCoBranded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isCoBranded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isCoBranded").toString()));
      }
      if ((jsonObj.get("coBrandedName") != null && !jsonObj.get("coBrandedName").isJsonNull()) && !jsonObj.get("coBrandedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coBrandedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coBrandedName").toString()));
      }
      if (jsonObj.get("authenticationMethods") != null && !jsonObj.get("authenticationMethods").isJsonNull()) {
        JsonArray jsonArrayauthenticationMethods = jsonObj.getAsJsonArray("authenticationMethods");
        if (jsonArrayauthenticationMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authenticationMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authenticationMethods` to be an array in the JSON string but got `%s`", jsonObj.get("authenticationMethods").toString()));
          }

          // validate the optional field `authenticationMethods` (array)
          for (int i = 0; i < jsonArrayauthenticationMethods.size(); i++) {
            AuthMethod.validateJsonElement(jsonArrayauthenticationMethods.get(i));
          };
        }
      }
      if ((jsonObj.get("issuerName") != null && !jsonObj.get("issuerName").isJsonNull()) && !jsonObj.get("issuerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerName").toString()));
      }
      if ((jsonObj.get("longDescription") != null && !jsonObj.get("longDescription").isJsonNull()) && !jsonObj.get("longDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longDescription").toString()));
      }
      if ((jsonObj.get("foregroundColor") != null && !jsonObj.get("foregroundColor").isJsonNull()) && !jsonObj.get("foregroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foregroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foregroundColor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalCardData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalCardData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalCardData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalCardData.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalCardData>() {
           @Override
           public void write(JsonWriter out, DigitalCardData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalCardData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             DigitalCardData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DigitalCardData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DigitalCardData
  * @throws IOException if the JSON string is invalid with respect to DigitalCardData
  */
  public static DigitalCardData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalCardData.class);
  }

 /**
  * Convert an instance of DigitalCardData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

